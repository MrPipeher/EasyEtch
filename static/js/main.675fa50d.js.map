{"version":3,"file":"static/js/main.675fa50d.js","mappings":"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","sources":["src/components/FirebaseConfig.js","src/components/ServerURLContext.js","src/components/ServerContext.js","src/screens/AuthScreens/SignInScreen.js","src/components/UIComponents/UIComponents.js","src/screens/AuthScreens/SignUpScreen.js","src/screens/AuthScreens/ForgotPasswordScreen.js","src/components/HostHomeProfileContext.js","src/components/TherapistProfileContext.js","src/screens/HostHomeScreens/CreateHostHomeProfileScreen.js","src/screens/HostHomeScreens/GenerateHostHomeNotesScreen.js","src/screens/HostHomeScreens/ViewHostHomeProfileScreen.js","src/screens/TherapistScreens/CreateTherapistProfileScreen.js","src/components/DispositionContainer.js","src/screens/TherapistScreens/GenerateTherapistNotesScreen.js","src/screens/TherapistScreens/ViewTherapistProfileScreen.js","src/screens/CommonScreens/SettingsScreen.js","src/screens/CommonScreens/PurchaseScreen.js","src/screens/CommonScreens/StripeCheckoutScreen.js","src/screens/MainNavigator.js","src/screens/RootNavigator.js","App.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/create fake namespace object","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/node module decorator","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBQuUaG_jhfDZpKTdEX2bDQi184lRiBFzg\",\r\n    authDomain: \"easyetch-2764f.firebaseapp.com\",\r\n    projectId: \"easyetch-2764f\",\r\n    storageBucket: \"easyetch-2764f.appspot.com\",\r\n    messagingSenderId: \"429626063303\",\r\n    appId: \"1:429626063303:web:e163bac12113c7b43c01e2\"\r\n  };\r\n\r\n// initialize Firebase App\r\nconst FIREBASE_APP = initializeApp(firebaseConfig);\r\nconst FIREBASE_AUTH = getAuth(FIREBASE_APP);\r\n\r\nexport { FIREBASE_APP, FIREBASE_AUTH};","import React, { createContext, useContext } from 'react';\r\n\r\nconst ServerURLContext = createContext();\r\n\r\nexport const useServerURL = () => {\r\n  return useContext(ServerURLContext);\r\n};\r\n\r\nexport const ServerURLProvider = ({ children, serverURL }) => {\r\n  return (\r\n    <ServerURLContext.Provider value={serverURL}>\r\n      {children}\r\n    </ServerURLContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { useServerURL } from './ServerURLContext';\r\n\r\nconst ServerContext = createContext();\r\n\r\nexport const useServerContext = () => {\r\n  return useContext(ServerContext);\r\n};\r\n\r\nexport const ServerProvider = ({ children, profileOwner }) => {\r\n  const [credits, setCredits] = useState(null);\r\n  const [accountType, setAccountType] = useState(null);\r\n  const serverURL = useServerURL();\r\n\r\n  const fetchAccountType = async (profileOwner) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/common/getAccountType?profileOwner=${profileOwner}`);\r\n      const data = await response.json();\r\n      setAccountType(data.accountType);\r\n    } catch (error) {\r\n      console.error('Error fetching account type:', error);\r\n    }\r\n  };\r\n\r\n  const changeAccountType = async (profileOwner, newAccountType) => {\r\n\r\n    //Prevent Spam\r\n    if (newAccountType == accountType) return;\r\n\r\n    try {\r\n      const response = await fetch(`${serverURL}/common/changeAccountType`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner: profileOwner,\r\n          newAccountType: newAccountType\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      setAccountType(data.updatedAccountType);\r\n    } catch (error) {\r\n      console.error('Error changing account type:', error);\r\n    }\r\n  };\r\n\r\n  const fetchCredits = async (profileOwner) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/common/credits?profileOwner=${profileOwner}`);\r\n      const data = await response.json();\r\n      setCredits(data);\r\n    } catch (error) {\r\n      console.error('Error fetching credits:', error);\r\n    }\r\n  };\r\n\r\n  const reloadCredits = async () => {\r\n    try {\r\n      const creditsData = await fetchCredits(profileOwner);\r\n      setCredits(creditsData);\r\n    } catch (error) {\r\n      console.error('Error reloading credits:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        await fetchAccountType(profileOwner);\r\n        await fetchCredits(profileOwner);\r\n      } catch (error) {\r\n        console.error('Error fetching account data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [profileOwner]);\r\n\r\n  return (\r\n    <ServerContext.Provider \r\n      value={{ \r\n          serverURL,\r\n          profileOwner,\r\n          credits,\r\n          setCredits,\r\n          reloadCredits,\r\n          accountType,\r\n          changeAccountType\r\n        }}>\r\n      {children}\r\n    </ServerContext.Provider>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { View, Image, Text, TouchableOpacity, TextInput} from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { FIREBASE_AUTH } from '../../components/FirebaseConfig';\r\nimport { signInWithEmailAndPassword } from 'firebase/auth';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nconst SignInScreen = () => {\r\n  const navigation = useNavigation();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleSignIn = async () => {\r\n    try {\r\n      const auth = FIREBASE_AUTH;\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n    } catch (error) {\r\n      console.error('Error signing in:', error);\r\n      setError('Invalid email or password.');\r\n    }\r\n  };\r\n\r\n  const navigateToSignUp = () => {\r\n    navigation.navigate('SignUp');\r\n  };\r\n\r\n  const navigateToForgotPassword = () => {\r\n    navigation.navigate('ForgotPassword');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          {/* Header */}\r\n          <View className = \"h-[40%] justify-center items-center\">\r\n\r\n            {/* Logo */}\r\n            <Image \r\n              className = \"w-[60%] h-[100%] absolute\"\r\n              source={require('../../../assets/images/Logo.png')} \r\n            />\r\n\r\n          </View>\r\n\r\n          {/* Container */}\r\n          <View className = \"h-[50%] w-full justify-center items-center\">\r\n\r\n            {error && (\r\n              <Text className = \"text-red-500 text-base m-2\">{error}</Text>\r\n            )}\r\n\r\n            <View className = \"w-[75%] h-[20%] bg-white/75 rounded-full justify-center my-2\">\r\n              <TextInput\r\n                  className=\"h-full w-full text-black text-xl text-center self-center\"\r\n                  placeholder=\"Email\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setEmail(text)}\r\n                  value={email}\r\n                  secureTextEntry={false}\r\n              />\r\n            </View>\r\n\r\n            <View className = \"w-[75%] h-[20%] bg-white/75 rounded-full justify-center my-2\">\r\n                <TextInput\r\n                    className=\"h-full w-full text-black text-xl text-center self-center\"\r\n                    placeholder=\"Password\"\r\n                    placeholderTextColor={'gray'}\r\n                    onChangeText={(text) => setPassword(text)}\r\n                    value={password}\r\n                    secureTextEntry={true}\r\n                />\r\n            </View>\r\n\r\n            <View className=\"w-[50%] h-[15%] border-white border-2 bg-sky-400/50 rounded-xl justify-center my-2\">\r\n              <TouchableOpacity onPress={handleSignIn}>\r\n                  <Text className=\"text-white text-xl text-center\">Sign In</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n            <View className=\"w-[50%] h-[15%] border-sky-500 border-2 bg-white rounded-xl justify-center my-2\">\r\n                <TouchableOpacity onPress={navigateToSignUp}>\r\n                    <Text className=\"text-sky-500 text-xl text-center\">Sign Up</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n\r\n          </View>\r\n\r\n          {/* Footer */}\r\n          <View className = \"h-[5%] justify-center items-center\">\r\n\r\n            <TouchableOpacity onPress={navigateToForgotPassword}>\r\n              <Text className = \"text-white text-2xl\">Forgot password?</Text>\r\n            </TouchableOpacity>\r\n\r\n          </View>\r\n\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default SignInScreen;\r\n","import React from 'react';\r\nimport { View, TouchableOpacity, Text, TextInput } from 'react-native';\r\n\r\nconst CustomButton = ({ onPress, buttonText }) => {\r\n    return (\r\n        <View className={styles.button}>\r\n            <TouchableOpacity onPress={onPress}>\r\n                <Text className={styles.buttonText}>{buttonText}</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst CustomActionButton = ({ onPress, buttonText }) => {\r\n    return (\r\n        <View className={styles.actionButton}>\r\n            <TouchableOpacity onPress={onPress}>\r\n                <Text className={styles.actionButtonText}>{buttonText}</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    );\r\n};\r\n\r\nconst CustomInputField = ({ placeholder, onChangeText, value, secureTextEntry }) => {\r\n    return (\r\n        <View className = {styles.inputField}>\r\n            <TextInput\r\n                className={styles.inputFieldText}\r\n                placeholder={placeholder}\r\n                placeholderTextColor={'gray'}\r\n                onChangeText={(text) => onChangeText(text)}\r\n                value={value}\r\n                secureTextEntry={secureTextEntry ? true : false}\r\n            />\r\n        </View>\r\n    );\r\n  };\r\n\r\nconst styles = {\r\n    button: \"w-[50%] h-[30%] bg-white rounded-xl justify-center my-2\",\r\n\r\n    buttonText: \"text-black text-xl text-center\",\r\n\r\n    actionButton: \"w-[50%] h-[30%] border-white border-2 bg-sky-400/50 rounded-xl justify-center my-2\",\r\n\r\n    actionButtonText: \"text-white text-xl text-center\",\r\n\r\n    inputField: \"w-[50%] h-[30%] bg-white/75 rounded-full justify-center my-2\",\r\n    \r\n    inputFieldText: \"h-full w-full text-black text-xl text-center self-center\",\r\n};\r\n\r\nexport {CustomButton, CustomActionButton, CustomInputField}\r\n","import React, { useState } from 'react';\r\nimport { View, Image, Text, TouchableOpacity, Button } from 'react-native';\r\nimport { Picker } from '@react-native-picker/picker';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useServerURL } from '../../components/ServerURLContext';\r\nimport { CustomInputField, CustomActionButton } from '../../components/UIComponents/UIComponents';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { FIREBASE_AUTH } from '../../components/FirebaseConfig';\r\nimport { signInWithEmailAndPassword } from 'firebase/auth';\r\n\r\nconst SignUpScreen = () => {\r\n  const navigation = useNavigation();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [userType, setUserType] = useState('Host Home'); // Default value is 'Host Home'\r\n  const serverURL = useServerURL();\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleSignup = async () => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/common/signup`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password, userType }),\r\n      });\r\n\r\n      if (response.ok) {\r\n        handleSignIn();\r\n      } else {\r\n        if (response.status == 500) {\r\n          setError('This Email is already Registed, try using forgot password!');\r\n        } else {\r\n          setError('Error connecting to server.');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error signing up:', error);\r\n    }\r\n  };\r\n\r\n  const handleSignIn = async () => {\r\n    try {\r\n      const auth = FIREBASE_AUTH;\r\n      await signInWithEmailAndPassword(auth, email, password);\r\n    } catch (error) {\r\n      console.error('Error signing in:', error);\r\n      setError('Error connecting to server.');\r\n    }\r\n  };\r\n\r\n  const navigateToSignIn = () => {\r\n    navigation.navigate('SignIn');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          {/* Title */}\r\n          <View className = \"h-[5%]\"/>\r\n\r\n          {/* Header */}\r\n          <View className = \"h-[25%] justify-center items-center\">\r\n\r\n            {/* Logo */}\r\n            <Image \r\n              className = \"w-[60%] h-[100%] absolute\"\r\n              source={require('../../../assets/images/Logo.png')} \r\n            />\r\n\r\n          </View>\r\n\r\n          {/* Picker */}\r\n          <View className = \"h-[20%] justify-center items-center\">\r\n\r\n            <View className = \"w-full h-full items-center justify-center\">\r\n\r\n              <Text className = \"text-white text-2xl text-center\">Account Type:</Text>\r\n\r\n              <View className = \"flex-row h-full w-full justify-center items-center space-x-8\">\r\n\r\n                {userType === 'Host Home' ? (\r\n                  <View className = \"w-[30%] h-[50%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setUserType('Therapist')}>\r\n                      <Text className = \"text-white text-xl text-center\">Host Home</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[50%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setUserType('Host Home')}>\r\n                      <Text className = \"text-white text-xl text-center\">Host Home</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n\r\n                {userType === 'Therapist' ? (\r\n                  <View className = \"w-[30%] h-[50%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setUserType('Host Home')}>\r\n                      <Text className = \"text-white text-xl text-center\">Therapist</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[50%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setUserType('Therapist')}>\r\n                      <Text className = \"text-white text-xl text-center\">Therapist</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n              </View>\r\n              \r\n            </View>\r\n\r\n          </View>\r\n\r\n          {/* Container */}\r\n          <View className = \"h-[30%] justify-center items-center\">\r\n\r\n            {error && (\r\n              <Text className = \"text-red-500 text-xl text-center m-2\">{error}</Text>\r\n            )}\r\n\r\n            <CustomInputField\r\n              placeholder=\"Email\"\r\n              onChangeText={setEmail}\r\n              value={email}\r\n              secureTextEntry={false}\r\n            />\r\n\r\n            <CustomInputField\r\n              placeholder=\"Password\"\r\n              onChangeText={setPassword}\r\n              value={password}\r\n              secureTextEntry={true}\r\n            />\r\n\r\n            <CustomActionButton onPress={handleSignup} buttonText=\"Sign Up\"/>\r\n\r\n          </View>\r\n\r\n          {/* Footer */}\r\n          <View className = \"h-[20%] justify-center items-center\">\r\n\r\n            <View className = \"w-[40%] h-[30%] bg-white border-2 border-sky-500 rounded-full justify-center items-center\">\r\n              <TouchableOpacity className = \"w-full h-full justify-center\" onPress={navigateToSignIn}>\r\n                <Text className = \"text-black text-xl text-center\">Go Back</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n          </View>\r\n\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default SignUpScreen;\r\n","import React, {useState} from 'react';\r\nimport { View, Text, TouchableOpacity, TextInput } from 'react-native';\r\nimport { FIREBASE_AUTH } from '../../components/FirebaseConfig';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { sendPasswordResetEmail } from 'firebase/auth';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst ForgotPasswordScreen = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [emailSent, setEmailSent] = useState(false);\r\n  const navigation = useNavigation();\r\n\r\n  const handlePasswordReset = async () => {\r\n    try {\r\n      const auth = FIREBASE_AUTH;\r\n      await sendPasswordResetEmail(auth, email);\r\n      setEmailSent(true);\r\n    } catch (error) {\r\n      // Handle errors\r\n      console.error('Error sending password reset email:', error.message);\r\n    }\r\n  };\r\n\r\n  const navigateToSignIn = () => {\r\n    navigation.navigate('SignIn');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-full w-full justify-center items-center space-y-4\">\r\n\r\n            <View className = \"h-[20%]\"/>\r\n\r\n            <View className = \"h-[50%] w-full justify-center items-center space-y-4\">\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Enter your Email\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={email}\r\n                  onChangeText={setEmail}\r\n                />\r\n              </View>\r\n\r\n              <View className = \"w-[50%] h-[10%] bg-sky-400/50 border-2 border-white rounded-full justify-center\">\r\n                <TouchableOpacity className = \"h-full w-full justify-center\" onPress={handlePasswordReset}> \r\n                  <Text className = \"text-white text-xl text-center\">Send Instructions</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              {emailSent ? <Text className = \"text-center text-white text-2xl\">Please check your email for instructions on resetting your password.</Text> : null}\r\n            </View>\r\n\r\n            <View className = \"h-[30%] w-full items-center\">\r\n\r\n              <View className = \"w-[25%] h-[20%] bg-white rounded-full justify-center\">\r\n                <TouchableOpacity className = \"h-full w-full justify-center\" onPress={navigateToSignIn}> \r\n                  <Text className = \"text-black text-xl text-center\">Go Back</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n            </View>\r\n\r\n          </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ForgotPasswordScreen;\r\n","import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { useServerURL } from './ServerURLContext';\r\n\r\nconst HostHomeProfileContext = createContext();\r\n\r\nexport const useHostHomeProfileContext = () => {\r\n  return useContext(HostHomeProfileContext);\r\n};\r\n\r\nexport const HostHomeProfileProvider = ({ children, profileOwner }) => {\r\n  const serverURL = useServerURL();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [selectedProfile, setSelectedProfile] = useState(null);\r\n  const [note, setNote] = useState(null);\r\n  const [dayProgram, setDayProgram] = useState(false);\r\n\r\n  const fetchProfiles = async (profileOwner) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/hostHome/profiles?profileOwner=${profileOwner}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching profiles:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const createProfile = async (newProfileData) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/hostHome/createprofile`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner,\r\n          ...newProfileData,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        console.log('Profile created successfully:', data);\r\n        setProfiles([...profiles, data]);\r\n        setSelectedProfile(data);\r\n      } else {\r\n        console.error('Error creating profile:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating profile:', error);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (updatedProfile) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/hostHome/updateprofile`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner: profileOwner,\r\n          profileId: updatedProfile.profileId,\r\n          updatedProfileData: updatedProfile\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Profile updated successfully!');\r\n        const updatedProfiles = profiles.map(profile =>\r\n          profile.profileId === updatedProfile.profileId ? updatedProfile : profile\r\n        );\r\n        setProfiles(updatedProfiles);\r\n        setSelectedProfile(updatedProfile);\r\n      } else {\r\n        console.error('Failed to update profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n    }\r\n  };\r\n\r\n  const deleteProfile = async (profileId) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/hostHome/deleteprofile`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner: profileOwner,\r\n          profileId: profileId\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Profile deleted successfully!');\r\n        const updatedProfiles = profiles.filter(profile => profile.profileId !== profileId);\r\n        setProfiles(updatedProfiles);\r\n        if (selectedProfile && selectedProfile.profileId === profileId) {\r\n          setSelectedProfile(updatedProfiles.length > 0 ? updatedProfiles[0] : null);\r\n        }\r\n      } else {\r\n        console.error('Failed to delete profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting profile:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const profilesData = await fetchProfiles(profileOwner);\r\n        setProfiles(profilesData);\r\n        if (profilesData.length > 0) {\r\n          setSelectedProfile(profilesData[0]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching profiles:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [profileOwner]);\r\n\r\n  return (\r\n    <HostHomeProfileContext.Provider \r\n      value={{ \r\n          profileOwner,\r\n          profiles,\r\n          createProfile,\r\n          updateProfile,\r\n          deleteProfile,\r\n          selectedProfile,\r\n          setSelectedProfile,\r\n          note,\r\n          setNote,\r\n          dayProgram,\r\n          setDayProgram,\r\n        }}>\r\n      {children}\r\n    </HostHomeProfileContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { useServerURL } from './ServerURLContext';\r\n\r\nconst TherapistProfileContext = createContext();\r\n\r\nexport const useTherapistProfileContext = () => {\r\n  return useContext(TherapistProfileContext);\r\n};\r\n\r\nexport const TherapistProfileProvider = ({ children, profileOwner }) => {\r\n  const serverURL = useServerURL();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [selectedProfile, setSelectedProfile] = useState(null);\r\n  const [note, setNote] = useState(null);\r\n  const [behavior, setBehavior] = useState('');\r\n  const [intervention, setIntervention] = useState('');\r\n  const [response, setResponse] = useState('');\r\n  const [plan, setPlan] = useState('');\r\n\r\n  const fetchProfiles = async (profileOwner) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/therapist/profiles?profileOwner=${profileOwner}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching profiles:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const createProfile = async (newProfileData) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/therapist/createprofile`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner,\r\n          ...newProfileData,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setProfiles([...profiles, data]);\r\n        setSelectedProfile(data);\r\n      } else {\r\n        console.error('Error creating profile:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating profile:', error);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (updatedProfile) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/therapist/updateprofile`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner: profileOwner,\r\n          profileId: updatedProfile.profileId,\r\n          updatedProfileData: updatedProfile\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Profile updated successfully!');\r\n        const updatedProfiles = profiles.map(profile =>\r\n          profile.profileId === updatedProfile.profileId ? updatedProfile : profile\r\n        );\r\n        setProfiles(updatedProfiles);\r\n        setSelectedProfile(updatedProfile);\r\n      } else {\r\n        console.error('Failed to update profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n    }\r\n  };\r\n\r\n  const deleteProfile = async (profileId) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/therapist/deleteprofile`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner: profileOwner,\r\n          profileId: profileId\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Profile deleted successfully!');\r\n        const updatedProfiles = profiles.filter(profile => profile.profileId !== profileId);\r\n        setProfiles(updatedProfiles);\r\n        if (selectedProfile && selectedProfile.profileId === profileId) {\r\n          setSelectedProfile(updatedProfiles.length > 0 ? updatedProfiles[0] : null);\r\n        }\r\n      } else {\r\n        console.error('Failed to delete profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting profile:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const profilesData = await fetchProfiles(profileOwner);\r\n        setProfiles(profilesData);\r\n        if (profilesData.length > 0) {\r\n          setSelectedProfile(profilesData[0]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching profiles:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [profileOwner]);\r\n\r\n  return (\r\n    <TherapistProfileContext.Provider \r\n      value={{ \r\n          profileOwner,\r\n          profiles,\r\n          createProfile,\r\n          updateProfile,\r\n          deleteProfile,\r\n          selectedProfile,\r\n          setSelectedProfile,\r\n          note,\r\n          setNote,\r\n          behavior,\r\n          setBehavior,\r\n          intervention,\r\n          setIntervention,\r\n          response,\r\n          setResponse,\r\n          plan,\r\n          setPlan,\r\n        }}>\r\n      {children}\r\n    </TherapistProfileContext.Provider>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, FlatList, ScrollView } from 'react-native';\r\nimport { useHostHomeProfileContext } from '../../components/HostHomeProfileContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst CreateHostHomeProfileScreen = () => {\r\n  const { createProfile } = useHostHomeProfileContext();\r\n  const [profileName, setProfileName] = useState('');\r\n  const [profileGender, setProfileGender] = useState('Male');\r\n  const [profileGoals, setProfileGoals] = useState('');\r\n  const [morningMedication, setMorningMedication] = useState(false);\r\n  const [afternoonMedication, setAfternoonMedication] = useState(false);\r\n  const [nightMedication, setNightMedication] = useState(false);\r\n  const [activity, setActivity] = useState('');\r\n  const [activities, setActivities] = useState([]);\r\n  const navigation = useNavigation();\r\n\r\n  const handleProfileCreation = async () => {\r\n    if (!profileName.trim() || !profileGender.trim() || !profileGoals.trim()) {\r\n      console.error('All fields are required.');\r\n      return;\r\n    }\r\n\r\n    const newProfileData = {\r\n      profileName,\r\n      profileGender,\r\n      profileGoals,\r\n      morningMedication,\r\n      afternoonMedication,\r\n      nightMedication,\r\n      activities,\r\n    };\r\n\r\n    try {\r\n      await createProfile(newProfileData);\r\n\r\n      // Reset Fields\r\n      setProfileName('');\r\n      setProfileGender('Male');\r\n      setProfileGoals('');\r\n      setMorningMedication(false);\r\n      setAfternoonMedication(false);\r\n      setNightMedication(false);\r\n      setActivities([]);\r\n\r\n    } catch (error) {\r\n      console.log('Error creating profile:', error.message);\r\n    }\r\n  };\r\n\r\n  const handleAddActivity = () => {\r\n    if (activity.trim()) {\r\n      setActivities(prevActivities => [...prevActivities, activity]);\r\n      setActivity('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteActivity = (index) => {\r\n    setActivities(prevActivities => prevActivities.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const handleGenderToggle = () => {\r\n    setProfileGender(prevGender => (prevGender === 'Male' ? 'Female' : 'Male'));\r\n  };\r\n\r\n  const navigateToView = () => {\r\n    navigation.navigate('ViewProfile');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n            \r\n            {/* Title */}\r\n            <View className = \"h-[10%]\"/>\r\n\r\n            {/* Profile Info */}\r\n            <View className = \"h-[20%] justify-center items-center\">\r\n        \r\n              <View className = \"w-[75%] h-[25%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Name\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileName(text)}\r\n                  value={profileName}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <View className = \"w-[75%] h-[25%] bg-white rounded-full justify-center my-2\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleGenderToggle}>\r\n                  <Text className = \"text-black text-base text-center\">Gender: {profileGender}</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <View className = \"w-[75%] h-[25%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Goals\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileGoals(text)}\r\n                  value={profileGoals}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n            </View>\r\n\r\n            {/* Medication */}\r\n            <View className = \"h-[15%] justify-center\">\r\n\r\n              <Text className = \"text-white text-xl text-center\">Medications:</Text>\r\n\r\n              <View className = \"flex-row h-[70%] justify-evenly items-center\">\r\n                {morningMedication ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setMorningMedication(!morningMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Morning</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setMorningMedication(!morningMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Morning</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n\r\n                {afternoonMedication ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setAfternoonMedication(!afternoonMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Afternoon</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setAfternoonMedication(!afternoonMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Afternoon</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n\r\n                {nightMedication  ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setNightMedication(!nightMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Night</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setNightMedication(!nightMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Night</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n              </View>\r\n            </View>\r\n\r\n            {/* Activities */}\r\n            <View className = \"h-[40%]\">\r\n              <View className = \"flex-row h-[20%] justify-evenly items-center my-2\">\r\n\r\n                <View className = \"w-[60%] h-[100%] bg-white rounded-full\">\r\n                  <TextInput\r\n                    className=\"h-full w-full text-black text-base text-center\"\r\n                    placeholder=\"Add Activity\"\r\n                    placeholderTextColor={'gray'}\r\n                    onChangeText={(text) => setActivity(text)}\r\n                    value={activity}\r\n                    secureTextEntry={false}\r\n                  />\r\n                </View>\r\n                <View className = \"w-[30%] h-[100%] border-2 border-white rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleAddActivity}>\r\n                    <Text className = \"text-white text-xl text-center\">Save</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n              <View className = \"h-[70%] bg-white border-2 border-white rounded-2xl py-2 m-4\">\r\n                <FlatList\r\n                  data={activities}\r\n                  renderItem={({ item, index }) => (\r\n                    <ScrollView>\r\n                      <View className = \"flex-row\">\r\n\r\n                        <Text className = \"w-[75%] text-center text-black\">{item}</Text>\r\n\r\n                        <View className = \"w-[25%]\">\r\n                          <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handleDeleteActivity(index)}>\r\n                            <Text className = \"text-red-500 text-base text-center\">X</Text>\r\n                          </TouchableOpacity>\r\n                        </View>\r\n\r\n                      </View>\r\n                    </ScrollView>\r\n                  )}\r\n                  keyExtractor={(item, index) => index.toString()}\r\n                />\r\n              </View>\r\n            </View>\r\n\r\n            {/* Footer */}\r\n            <View className = \"h-[15%] flex-row items-center justify-evenly\">\r\n              <View className = \" h-[50%] w-[30%] bg-white/20 border-2 border-white rounded-full justify-center my-2\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleProfileCreation}>\r\n                  <Text className = \"text-white text-xl text-center\">Create</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <View className = \" h-[50%] w-[30%] bg-white rounded-full justify-center my-2\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={navigateToView}>\r\n                  <Text className = \"text-black text-xl text-center\">Go back</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default CreateHostHomeProfileScreen;\r\n","import { View, Text, ScrollView, TouchableOpacity, Alert} from 'react-native';\r\nimport React, { useState } from 'react'\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useHostHomeProfileContext } from '../../components/HostHomeProfileContext';\r\nimport { useServerContext } from '../../components/ServerContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Picker } from '@react-native-picker/picker';\r\nimport * as Clipboard from 'expo-clipboard';\r\n\r\nconst GenerateHostHomeNotesScreen = () => {\r\n  const navigation = useNavigation();\r\n  const { profiles, selectedProfile, setSelectedProfile, note, setNote, dayProgram, setDayProgram } = useHostHomeProfileContext();\r\n  const { serverURL, profileOwner, credits, setCredits } = useServerContext();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleProfileSelect = (profile) => {\r\n    setSelectedProfile(profile);\r\n  };\r\n\r\n  const handleToggleDayProgram = () => {\r\n    setDayProgram(!dayProgram); // Toggle dayProgram value\r\n  };\r\n  \r\n  const navigateToPurchase = () => {\r\n    navigation.navigate('Purchase');\r\n  };\r\n\r\n  const handleCopy = async () => {\r\n    await Clipboard.setStringAsync(note);\r\n    Alert.alert('Note Saved!', 'Your note has been saved to your clipboard!')\r\n  };\r\n\r\n  const handleFinished = () => {\r\n    setNote('');\r\n  };\r\n\r\n  const handleGenerate = async () => {\r\n\r\n    if (credits === 0) {\r\n      console.error('Error: Please purchase more credits to continue.');\r\n      return;\r\n    }\r\n\r\n    if (note) {\r\n      setNote('');\r\n    }\r\n\r\n    //Start Loading\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const response = await fetch(`${serverURL}/hostHome/generate?profileOwner=${profileOwner}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          selectedProfile,\r\n          dayProgram,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data) {\r\n        setNote(data.generatedText);\r\n        setCredits(data.remainingCredits);\r\n      } else {\r\n        console.error('Error:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending selected profile to server:', error);\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const getCurrentDate = () => {\r\n    const currentDate = new Date();\r\n    const month = currentDate.getMonth() + 1; // Months are zero-based\r\n    const day = currentDate.getDate();\r\n    const year = currentDate.getFullYear();\r\n\r\n    return `${String(month).padStart(2, '0')}/${String(day).padStart(2, '0')}/${year}`;\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const formattedDate = getCurrentDate();\r\n      const filename = `${selectedProfile.profileName}_${formattedDate}.txt`;\r\n\r\n      // Create a Blob containing the text\r\n      const blob = new Blob([note], { type: 'text/plain' });\r\n\r\n      // Create a download link and trigger a click event to download the file\r\n      const link = document.createElement('a');\r\n      link.href = window.URL.createObjectURL(blob);\r\n      link.download = filename;\r\n      link.click();\r\n    } catch (error) {\r\n      console.error('Error saving file:', error);\r\n      // Handle error as needed\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View className = \"bg-white flex-1\">\r\n  \r\n        {/* Main Container */}\r\n        <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n  \r\n          {/* Background Gradient */}\r\n          <LinearGradient \r\n            className = \"h-full w-full absolute\" \r\n            colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n  \r\n            <View className = \"h-[20%]\"/>\r\n\r\n            <View className = \"h-[60%] justify-center\">\r\n\r\n              <Text className = \"text-white text-3xl text-center\">Generating Note..</Text>\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[20%] justify-center items-center\">\r\n\r\n              <Text className = \"text-white text-base text-center\">We accept 07</Text>\r\n\r\n            </View>\r\n          \r\n          </LinearGradient>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (note) {\r\n    return (\r\n      <View className = \"bg-white flex-1\">\r\n  \r\n        {/* Main Container */}\r\n        <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n  \r\n          {/* Background Gradient */}\r\n          <LinearGradient \r\n            className = \"h-full w-full absolute\" \r\n            colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n  \r\n            <View className = \"h-[10%]\"/>\r\n\r\n            <View className = \"h-[60%]\">\r\n\r\n              <View className = \"h-[80%] w-[80%] bg-white justify-center self-center p-4\">\r\n\r\n                <ScrollView>\r\n                  <Text className = \"text-black text-base text-center\">{note}</Text>\r\n                </ScrollView>\r\n\r\n              </View>\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[30%] items-center\">\r\n                \r\n              <View className = \"flex-row w-full h-[50%] justify-evenly\">\r\n                <View className = \"w-[40%] h-[50%] bg-green-500 rounded-full items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleCopy}>\r\n                    <Text className = \"text-white text-xl text-center\">Copy</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                <View className = \"w-[40%] h-[50%] bg-white border-2 border-green-500 rounded-full items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleSave}>\r\n                    <Text className = \"text-black text-xl text-center\">Save</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n              <View className = \"h-[50%] w-full justify-center items-center\">\r\n                <View className = \"w-[40%] h-[50%] bg-white border-2 border-white rounded-full\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleFinished}>\r\n                    <Text className = \"text-black text-xl text-center\">Go Back</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n            </View>\r\n          \r\n          </LinearGradient>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-[20%] justify-center pt-14\">\r\n\r\n            <Text className = \"text-center text-white\">Select a Profile:</Text>\r\n\r\n            <View className = \"w-[50%] border-2 border-sky-500 bg-white self-center\">\r\n              <Picker\r\n                selectedValue={selectedProfile ? selectedProfile.profileId.toString() : ''}\r\n                onValueChange={(itemValue) => handleProfileSelect(profiles.find(item => item.profileId.toString() === itemValue))}\r\n              >\r\n                {profiles.map((item) => (\r\n                  <Picker.Item\r\n                    key={item.profileId.toString()}\r\n                    label={item.profileName}\r\n                    value={item.profileId.toString()}\r\n                  />\r\n                ))}\r\n              </Picker>\r\n            </View>\r\n\r\n          </View>\r\n\r\n          {selectedProfile && (\r\n          <View className = \"h-[80%]\">\r\n\r\n            <View className = \"h-[15%] space-y-1\">\r\n              <Text className = \"text-white text-xl font-bold text-center\">Profile Goals:</Text>\r\n              <View className = \"h-[50%] w-[75%] bg-white justify-center self-center rounded-full\">\r\n                <Text className = \"text-black text-center text-base\">{selectedProfile.profileGoals}</Text>\r\n              </View>\r\n            </View>\r\n\r\n            {/* Basic Info*/}\r\n            <View className = \"h-[15%] space-y-1\">\r\n\r\n            <Text className = \"text-white text-xl font-bold text-center\">Medications:</Text>\r\n\r\n              <View className = \" bg-white m-4 p-2 justify-center rounded-2xl\">\r\n                <Text className = \"text-black\">-Morning: {selectedProfile.morningMedication ? 'Yes' : 'No'} </Text>\r\n                <Text className = \"text-black\">-Afternoon: {selectedProfile.afternoonMedication ? 'Yes' : 'No'} </Text>\r\n                <Text className = \"text-black\">-Night: {selectedProfile.nightMedication ? 'Yes' : 'No'} </Text>\r\n              </View>\r\n                \r\n            </View>\r\n\r\n            {/* Activities */}\r\n            <View className = \"h-[40%] space-y-1 pt-6\">\r\n\r\n              <Text className = \"text-white text-xl font-bold text-center\">Activities:</Text>\r\n\r\n              <View className = \"h-[40%] m-4 p-2 bg-white rounded-2xl\">\r\n                <ScrollView>\r\n                  {selectedProfile.activities.map((item, index) => (\r\n                    <Text key={index} className = \"text-black text-transform: capitalize\">\r\n                      -{item}\r\n                    </Text>\r\n                  ))}\r\n                </ScrollView>\r\n              </View>\r\n\r\n              <View className = \"w-[50%] h-[15%] bg-white border-2 border-white rounded-full self-center items-center\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleToggleDayProgram}>\r\n                  <Text className = \"text-black text-xl text-center\">Day Program: {dayProgram ? 'Yes' : 'No'}</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n            \r\n            {/* Footer */}\r\n            <View className = \"h-[30%]\">\r\n                \r\n              <View className = \"h-full w-full items-center space-y-3\">\r\n\r\n                <Text className = \"text-white font-bold text-xl\">Credits: {credits}</Text>\r\n\r\n                <View className = \"w-[50%] h-[40%] bg-white border-2 border-white rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleGenerate}>\r\n                    <Text className = \"text-black text-xl text-center\">Generate!</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                <TouchableOpacity onPress={navigateToPurchase}>\r\n                  <Text className = \"text-white font-bold text-xl\">Buy Credits?</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n            </View>\r\n\r\n          </View>)}\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default GenerateHostHomeNotesScreen","import React, { useState } from 'react';\r\nimport { View, Text, TextInput, FlatList, TouchableOpacity, ScrollView } from 'react-native';\r\nimport { useHostHomeProfileContext } from '../../components/HostHomeProfileContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Picker } from '@react-native-picker/picker';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst ViewHostHomeProfileScreen = () => {\r\n  const { profiles, selectedProfile, setSelectedProfile, updateProfile, deleteProfile } = useHostHomeProfileContext();\r\n  const [newActivity, setNewActivity] = useState('');\r\n  const navigation = useNavigation();\r\n\r\n  const handleProfileSelect = (profile) => {\r\n    setSelectedProfile(profile);\r\n  };\r\n\r\n  const handleAddActivity = () => {\r\n    if (newActivity.trim() !== '') {\r\n      setSelectedProfile({ ...selectedProfile, activities: [...selectedProfile.activities, newActivity] });\r\n      setNewActivity('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteActivity = (activity) => {\r\n    const updatedActivities = selectedProfile.activities.filter((item) => item !== activity);\r\n    setSelectedProfile({ ...selectedProfile, activities: updatedActivities });\r\n  };\r\n\r\n  const handleUpdateProfile = async () => {\r\n    try {\r\n      await updateProfile(selectedProfile);\r\n      console.log('Profile updated successfully:', selectedProfile);\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteProfile = async () => {\r\n    try {\r\n      await deleteProfile(selectedProfile.profileId);\r\n    } catch (error) {\r\n      console.error('Error deleting profile:', error);\r\n    }\r\n  };\r\n\r\n  const handleGenderToggle = () => {\r\n    setSelectedProfile(prevProfile => ({\r\n      ...prevProfile,\r\n      profileGender: prevProfile.profileGender === 'Male' ? 'Female' : 'Male',\r\n    }));\r\n  };  \r\n\r\n  const navigateToCreate = () => {\r\n    navigation.navigate('CreateProfile');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-[15%]\">\r\n\r\n            <View className = \"absolute inset-x-0 bottom-0\">\r\n              <Text className = \"text-center text-white\">Select a Profile:</Text>\r\n\r\n              <View className = \"flex-row justify-center space-x-2\">\r\n                <View className = \"w-[60%] h-full border-2 border-sky-500 bg-white self-center \">\r\n                  <Picker\r\n                    selectedValue={selectedProfile ? selectedProfile.profileId.toString() : ''}\r\n                    onValueChange={(itemValue) => handleProfileSelect(profiles.find(item => item.profileId.toString() === itemValue))}\r\n                  >\r\n                    {profiles.map((item) => (\r\n                      <Picker.Item\r\n                        key={item.profileId.toString()}\r\n                        label={item.profileName}\r\n                        value={item.profileId.toString()}\r\n                      />\r\n                    ))}\r\n                  </Picker>\r\n                </View>\r\n\r\n                <View className = \"w-[20%] h-[100%] bg-white border-2 border-green-500 rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={navigateToCreate}> \r\n                    <Text className = \"text-black text-base text-center\">Add New</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n            </View>\r\n\r\n          </View>\r\n\r\n          {selectedProfile && (\r\n          <View className = \"h-[85%]\">\r\n\r\n            {/* Basic Info*/}\r\n            <View className = \"h-[30%] justify-center items-center space-y-1\">\r\n\r\n              <Text className = \"text-white\">Profile Name</Text>\r\n\r\n              <View className = \"w-[75%] h-[18%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Name\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileName}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileName: text })}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white\">Profile Gender</Text>\r\n\r\n              <View className = \"w-[75%] h-[18%] bg-white rounded-full justify-center\">\r\n                <TouchableOpacity onPress={handleGenderToggle}> \r\n                  <Text className = \"text-black text-base text-center\">Gender: {selectedProfile.profileGender}</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <Text className = \"text-white\">Profile Goals</Text>\r\n\r\n              <View className = \"w-[75%] h-[18%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Goals\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileGoals}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileGoals: text })}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n            </View>\r\n\r\n            {/* Medications */}\r\n            \r\n            <View className = \"h-[20%]\">\r\n              <Text className = \"text-white text-xl text-center\">Medications:</Text>\r\n\r\n              <View className = \"flex-row h-[70%] justify-evenly items-center\">\r\n                {selectedProfile.morningMedication ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, morningMedication: !selectedProfile.morningMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Morning</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, morningMedication: !selectedProfile.morningMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Morning</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n\r\n                {selectedProfile.afternoonMedication ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, afternoonMedication: !selectedProfile.afternoonMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Afternoon</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, afternoonMedication: !selectedProfile.afternoonMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Afternoon</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n\r\n                {selectedProfile.nightMedication ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, nightMedication: !selectedProfile.nightMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Night</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, nightMedication: !selectedProfile.nightMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Night</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n              </View>\r\n            </View>\r\n\r\n            {/* Activities */}\r\n            <View className = \"h-[40%]\">\r\n              <View className = \"flex-row h-[20%] justify-evenly items-center my-2\">\r\n\r\n                <View className = \"w-[60%] h-[100%] bg-white rounded-full\">\r\n                  <TextInput\r\n                    className=\"h-full w-full text-black text-base text-center\"\r\n                    placeholder=\"Add Activity\"\r\n                    placeholderTextColor={'gray'}\r\n                    onChangeText={(text) => setNewActivity(text)}\r\n                    value={newActivity}\r\n                    secureTextEntry={false}\r\n                  />\r\n                </View>\r\n                <View className = \"w-[30%] h-[100%] border-2 border-white rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleAddActivity}>\r\n                    <Text className = \"text-white text-xl text-center\">Save</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n              <View className = \"h-[60%] bg-white border-2 border-white rounded-2xl py-2 m-4\">\r\n                <FlatList\r\n                  data={selectedProfile.activities}\r\n                  renderItem={({ item, index }) => (\r\n                    <ScrollView>\r\n                      <View className = \"flex-row\">\r\n\r\n                        <Text className = \"w-[75%] text-center text-black\">{item}</Text>\r\n\r\n                        <View className = \"w-[25%]\">\r\n                          <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handleDeleteActivity(index)}>\r\n                            <Text className = \"text-red-500 text-base text-center\">X</Text>\r\n                          </TouchableOpacity>\r\n                        </View>\r\n\r\n                      </View>\r\n                    </ScrollView>\r\n                  )}\r\n                  keyExtractor={(item, index) => index.toString()}\r\n                />\r\n              </View>\r\n            </View>\r\n            \r\n            {/* Footer */}\r\n            <View className = \"h-[10%]\">\r\n              <View className = \"flex-row h-[70%] justify-evenly items-center\">\r\n\r\n                <View className = \"w-[30%] h-[75%] bg-white/20 border-2 border-white rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleUpdateProfile}>\r\n                    <Text className = \"text-white text-xl text-center\">Update</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                <View className = \"w-[30%] h-[75%] bg-red-500 border-2 border-red-500 rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleDeleteProfile}>\r\n                    <Text className = \"text-white text-xl text-center\">Delete</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n                \r\n              </View>\r\n            </View>\r\n\r\n          </View>)}\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default ViewHostHomeProfileScreen;\r\n","import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\r\nimport { useTherapistProfileContext } from '../../components/TherapistProfileContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst CreateTherapistProfileScreen = () => {\r\n  const { createProfile } = useTherapistProfileContext();\r\n  const [profileName, setProfileName] = useState('');\r\n  const [profileGender, setProfileGender] = useState('Male');\r\n  const [profileObjective, setProfileObjective] = useState('');\r\n  const [profileIntervention, setProfileIntervention] = useState('');\r\n  const [profileGoals, setProfileGoals] = useState('');\r\n  const navigation = useNavigation();\r\n\r\n  const handleProfileCreation = async () => {\r\n    if (\r\n      !profileName.trim() ||\r\n      !profileGender.trim() ||\r\n      !profileObjective.trim() ||\r\n      !profileIntervention.trim() ||\r\n      !profileGoals.trim()\r\n    ) {\r\n      console.error('All fields are required.');\r\n      return;\r\n    }\r\n  \r\n    const newProfileData = {\r\n      profileName,\r\n      profileGender,\r\n      profileObjective,\r\n      profileIntervention,\r\n      profileGoals,\r\n    };\r\n  \r\n    try {\r\n      await createProfile(newProfileData);\r\n\r\n      //Reset Fields\r\n      setProfileName('');\r\n      setProfileGender('Male');\r\n      setProfileObjective('');\r\n      setProfileIntervention('');\r\n      setProfileGoals('');\r\n  \r\n    } catch (error) {\r\n      console.log('Error creating profile:', error.message);\r\n    }\r\n  };  \r\n\r\n  const handleGenderToggle = () => {\r\n    setProfileGender(prevGender => (prevGender === 'Male' ? 'Female' : 'Male'));\r\n  };\r\n\r\n  const navigateToView = () => {\r\n    navigation.navigate('ViewProfile');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n            \r\n            {/* Title */}\r\n            <View className = \"h-[20%]\"/>\r\n\r\n            {/* Profile Info */}\r\n            <View className = \"h-[50%] justify-center items-center my-2\">\r\n\r\n              <Text className = \"text-white text-xl\">Profile Name</Text>\r\n        \r\n              <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Name\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileName(text)}\r\n                  value={profileName}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Gender</Text>\r\n\r\n              <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center my-2\">\r\n                  <TouchableOpacity onPress={handleGenderToggle}>\r\n                    <Text className = \"text-black text-base text-center\">Gender: {profileGender}</Text>\r\n                  </TouchableOpacity>\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Goals</Text>\r\n\r\n              <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Goals\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileGoals(text)}\r\n                  value={profileGoals}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Objective</Text>\r\n\r\n              <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Objective\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileObjective(text)}\r\n                  value={profileObjective}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Intervention</Text>\r\n\r\n              <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Intervention\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileIntervention(text)}\r\n                  value={profileIntervention}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n            </View>\r\n\r\n            {/* Footer */}\r\n            <View className = \"h-[20%] flex-row items-center justify-evenly\">\r\n              <View className = \" h-[50%] w-[40%] bg-white/20 border-2 border-white rounded-full justify-center my-2\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleProfileCreation}>\r\n                  <Text className = \"text-white text-xl text-center\">Create</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <View className = \" h-[50%] w-[40%] bg-white rounded-full justify-center my-2\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={navigateToView}>\r\n                  <Text className = \"text-black text-xl text-center\">Go back</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default CreateTherapistProfileScreen","import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, ScrollView } from 'react-native';\r\n\r\nconst DispositionContainer = ({ dispositions, selectedDisposition, toggleDisposition }) => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const filteredDispositions = dispositions.filter(disposition =>\r\n    disposition.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <TextInput\r\n        className=\"bg-white border-gray-400 border-2 h-[30%] w-[85%] self-center m-2\"\r\n        placeholder=\"Search\"\r\n        placeholderTextColor={'gray'}\r\n        onChangeText={setSearchTerm}\r\n        value={searchTerm}\r\n      />\r\n\r\n      <ScrollView>\r\n      {filteredDispositions.map((item, index) => (\r\n        <TouchableOpacity\r\n          key={index}\r\n          style={[\r\n            styles.dispositionButton,\r\n            selectedDisposition === item && styles.selectedDispositionButton\r\n          ]}\r\n          onPress={() => toggleDisposition(item)}\r\n        >\r\n          <Text className=\"text-black\">{item}</Text>\r\n        </TouchableOpacity>\r\n      ))}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default DispositionContainer;\r\n\r\nconst styles = {\r\n  dispositionButton: {\r\n    backgroundColor: 'white',\r\n    padding: 10,\r\n    margin: 5,\r\n  },\r\n  selectedDispositionButton: {\r\n    backgroundColor: 'lightblue',\r\n  },\r\n};\r\n","import { View, Text, ScrollView, TouchableOpacity, Alert} from 'react-native';\r\nimport React, { useState } from 'react'\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useTherapistProfileContext } from '../../components/TherapistProfileContext';\r\nimport { useServerContext } from '../../components/ServerContext';\r\nimport DispositionContainer from '../../components/DispositionContainer';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Picker } from '@react-native-picker/picker';\r\nimport * as Clipboard from 'expo-clipboard';\r\n\r\nconst behaviorDispositions = [\r\n  'Aggressive', 'Angry', 'Bored', 'Bright', 'Calm', 'Confused',\r\n  'Defiant', 'Depressed', 'Disgusted', 'Ecstatic', 'Enraged', 'Exhausted',\r\n  'Flat', 'Frightened', 'Frustrated', 'Happy', 'Lonely', 'Overwhelmed',\r\n  'Playful', 'Sad', 'Shy', 'Subdued', 'Suspicious', 'Talkative'\r\n];\r\n\r\nconst interventionDispositions = [\r\n  'ADHD', 'Anger', 'Anxiety', 'Communication Skills', 'Conduct disorder', 'Depression', 'Drug use', 'Emotional Spirals',\r\n  'Externalizing Behaviors', 'Family Conflicts', 'Grief/Loss Unresolved', 'Identifying Activating Events', 'Impulsivity', 'Internalizing Behaviors ',\r\n  'Low Self-Esteem ', 'Oppositional Defiant Disorder', 'Parenting', 'Positive Qualities Record', 'PTSD', 'Relationship Issues', 'Self Compassion', 'Self-Defeating Behavior',\r\n  'Self-Mutilation', 'Stress', 'Truancy',\r\n];\r\n\r\nconst GenerateTherapistNotesScreen = () => {\r\n  const navigation = useNavigation();\r\n  const { profiles, selectedProfile, setSelectedProfile, \r\n    note, \r\n    setNote, \r\n    behavior,\r\n    setBehavior,\r\n    intervention,\r\n    setIntervention,\r\n    response,\r\n    setResponse,\r\n    plan,\r\n    setPlan \r\n  } = useTherapistProfileContext();\r\n  const { serverURL, profileOwner, credits, setCredits } = useServerContext();\r\n  const [selectedBehaviorDispositions, setSelectedBehaviorDispositions] = useState('');\r\n  const [selectedInterventionDispositions, setSelectedInterventionDispositions] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleProfileSelect = (profile) => {\r\n    setSelectedProfile(profile);\r\n  };\r\n  \r\n  const navigateToPurchase = () => {\r\n    navigation.navigate('Purchase');\r\n  };\r\n\r\n  const toggleBehaviorDisposition = (disposition) => {\r\n    setSelectedBehaviorDispositions(disposition);\r\n  };\r\n  \r\n  const toggleInterventionDisposition = (disposition) => {\r\n    setSelectedInterventionDispositions(disposition);\r\n  };\r\n  \r\n  const handleGenerate = async () => {\r\n    if (selectedBehaviorDispositions.length === 0 || selectedInterventionDispositions.length === 0) {\r\n      console.error('Error: Please select at least one disposition.');\r\n      return;\r\n    }\r\n\r\n    if (credits === 0) {\r\n      console.error('Error: Please purchase more credits to continue.');\r\n      return;\r\n    }\r\n\r\n    //Start Loading\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(`${serverURL}/therapist/generate?profileOwner=${profileOwner}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          selectedBehaviorDispositions,\r\n          selectedInterventionDispositions\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data) {\r\n        setNote(true);\r\n        setBehavior(data.behavior);\r\n        setIntervention(data.intervention);\r\n        setResponse(data.response)\r\n        setPlan(data.plan)\r\n        setCredits(data.remainingCredits);\r\n      } else {\r\n        console.error('Error:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending selected profile to server:', error);\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleCopy = async (text) => {\r\n    await Clipboard.setStringAsync(text);\r\n    Alert.alert('Saved!', 'item has been saved');\r\n  }\r\n\r\n  const getCurrentDate = () => {\r\n    const currentDate = new Date();\r\n    const month = currentDate.getMonth() + 1; // Months are zero-based\r\n    const day = currentDate.getDate();\r\n    const year = currentDate.getFullYear();\r\n\r\n    return `${String(month).padStart(2, '0')}/${String(day).padStart(2, '0')}/${year}`;\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const formattedDate = getCurrentDate();\r\n      const filename = `${formattedDate}.txt`;\r\n      const combinedText = `Behavior\\n\\n${behavior}\\n\\nIntervention\\n\\n${intervention}\\n\\nResponse\\n\\n${response}\\n\\nPlan\\n\\n${plan}`;\r\n\r\n      // Create a Blob containing the text\r\n      const blob = new Blob([combinedText], { type: 'text/plain' });\r\n\r\n      // Create a download link and trigger a click event to download the file\r\n      const link = document.createElement('a');\r\n      link.href = window.URL.createObjectURL(blob);\r\n      link.download = filename;\r\n      link.click();\r\n    } catch (error) {\r\n      console.error('Error saving file:', error);\r\n      // Handle error as needed\r\n    }\r\n  };\r\n\r\n  const handleFinished = () => {\r\n    setSelectedBehaviorDispositions('');\r\n    setSelectedInterventionDispositions('');\r\n    setNote(false);\r\n    setBehavior('');\r\n    setIntervention('');\r\n    setResponse('');\r\n    setPlan('');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View className = \"bg-white flex-1\">\r\n  \r\n        {/* Main Container */}\r\n        <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n  \r\n          {/* Background Gradient */}\r\n          <LinearGradient \r\n            className = \"h-full w-full absolute\" \r\n            colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n  \r\n            <View className = \"h-[20%]\"/>\r\n\r\n            <View className = \"h-[60%] justify-center\">\r\n\r\n              <Text className = \"text-white text-3xl text-center\">Generating Note..</Text>\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[20%] justify-center items-center\">\r\n\r\n              <Text className = \"text-white text-base text-center\">We accept 07</Text>\r\n\r\n            </View>\r\n          \r\n          </LinearGradient>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (note) {\r\n    return (\r\n      <View className = \"bg-white flex-1\">\r\n  \r\n        {/* Main Container */}\r\n        <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n  \r\n          {/* Background Gradient */}\r\n          <LinearGradient \r\n            className = \"h-full w-full absolute\" \r\n            colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n  \r\n            <View className = \"h-[10%]\"/>\r\n\r\n            <View className = \"h-[60%]\">\r\n\r\n              <View className = \"h-[80%] w-[80%] bg-white justify-center self-center p-4\">\r\n\r\n                <ScrollView>\r\n                  <View className = \"w-full h-full justify-center items-center my-2 space-y-4\">\r\n\r\n                    <View className = \"flex-row space-x-8 justify-center\">\r\n\r\n                      <Text className = \"text-black text-xl text-center font-bold underline\">Behavior</Text>\r\n\r\n                      <View className = \"w-[50%] h-[100%] bg-white border-2 border-black rounded-full\">\r\n                        <TouchableOpacity className=\"w-full h-full justify-center\" onPress={() => handleCopy(behavior)}>\r\n                          <Text className = \"text-black text-base text-center\">Copy</Text>\r\n                        </TouchableOpacity>\r\n                      </View>\r\n\r\n                    </View>\r\n\r\n                    <Text className = \"text-black text-xl text-center\">{behavior}</Text>\r\n\r\n                    <View className = \"flex-row space-x-8 justify-center\">\r\n\r\n                      <Text className = \"text-black text-xl text-center font-bold underline\">Intervention</Text>\r\n\r\n                      <View className = \"w-[50%] h-[100%] bg-white border-2 border-black rounded-full\">\r\n                        <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handleCopy(intervention)}>\r\n                          <Text className = \"text-black text-base text-center\">Copy</Text>\r\n                        </TouchableOpacity>\r\n                      </View>\r\n\r\n                    </View>\r\n\r\n                    <Text className = \"text-black text-xl text-center\">{intervention}</Text>\r\n\r\n                    <View className = \"flex-row space-x-8 justify-center\">\r\n\r\n                      <Text className = \"text-black text-xl text-center font-bold underline\">Response</Text>\r\n\r\n                      <View className = \"w-[50%] h-[100%] bg-white border-2 border-black rounded-full\">\r\n                        <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handleCopy(response)}>\r\n                          <Text className = \"text-black text-base text-center\">Copy</Text>\r\n                        </TouchableOpacity>\r\n                      </View>\r\n\r\n                    </View>\r\n\r\n                    <Text className = \"text-black text-xl text-center\">{response}</Text>\r\n\r\n                    <View className = \"flex-row space-x-8 justify-center\">\r\n\r\n                      <Text className = \"text-black text-xl text-center font-bold underline\">Plan</Text>\r\n\r\n                      <View className = \"w-[50%] h-[100%] bg-white border-2 border-black rounded-full\">\r\n                        <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handleCopy(plan)}>\r\n                          <Text className = \"text-black text-base text-center\">Copy</Text>\r\n                        </TouchableOpacity>\r\n                      </View>\r\n\r\n                    </View>\r\n\r\n                    <Text className = \"text-black text-xl text-center\">{plan}</Text>\r\n\r\n                  </View>\r\n                </ScrollView>\r\n\r\n              </View>\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[30%] items-center\">\r\n                \r\n              <View className = \"flex-row w-full h-[50%] justify-evenly\">\r\n                <View className = \"w-[40%] h-[50%] bg-green-500 rounded-full items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleSave}>\r\n                    <Text className = \"text-white text-xl text-center\">Save</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                <View className = \"w-[40%] h-[50%] bg-white border-2 border-green-500 rounded-full items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleGenerate}>\r\n                    <Text className = \"text-black text-xl text-center\">New</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n              <View className = \"h-[50%] w-full justify-center items-center\">\r\n                <View className = \"w-[40%] h-[50%] bg-white border-2 border-white rounded-full\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleFinished}>\r\n                    <Text className = \"text-black text-xl text-center\">Go Back</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n            </View>\r\n          \r\n          </LinearGradient>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-[100%]\">\r\n\r\n            <View className = \"h-[5%]\"/>\r\n\r\n            <Text className = \"text-white text-xl text-center\">Behavior</Text>\r\n\r\n            <View className = \"h-[25%] w-[50%] space-y-1 self-center\">\r\n\r\n              <DispositionContainer\r\n                dispositions={behaviorDispositions}\r\n                selectedDisposition={selectedBehaviorDispositions}\r\n                toggleDisposition={toggleBehaviorDisposition}\r\n              />\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[5%]\"/>\r\n\r\n            <Text className = \"text-white text-xl text-center\">Intervention</Text>\r\n\r\n            <View className = \"h-[25%] w-[50%] space-y-1 self-center\">\r\n\r\n              <DispositionContainer\r\n                dispositions={interventionDispositions}\r\n                selectedDisposition={selectedInterventionDispositions}\r\n                toggleDisposition={toggleInterventionDisposition}\r\n              />\r\n\r\n            </View>\r\n            \r\n            {/* Footer */}\r\n            <View className = \"h-[30%]\">\r\n                \r\n              <View className = \"h-full w-full justify-center items-center space-y-3\">\r\n\r\n                <Text className = \"text-white font-bold text-xl\">Credits: {credits}</Text>\r\n\r\n                <View className = \"w-[50%] h-[40%] bg-white border-2 border-white rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleGenerate}>\r\n                    <Text className = \"text-black text-xl text-center\">Generate!</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                <TouchableOpacity onPress={navigateToPurchase}>\r\n                  <Text className = \"text-white font-bold text-xl\">Buy Credits?</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n            </View>\r\n\r\n          </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default GenerateTherapistNotesScreen","import React from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\r\nimport { useTherapistProfileContext } from '../../components/TherapistProfileContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Picker } from '@react-native-picker/picker';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst ViewTherapistProfileScreen = () => {\r\n  const { profiles, selectedProfile, setSelectedProfile, updateProfile, deleteProfile } = useTherapistProfileContext();\r\n  const navigation = useNavigation();\r\n\r\n  const handleProfileSelect = (profile) => {\r\n    setSelectedProfile(profile);\r\n  };\r\n\r\n  const handleUpdateProfile = async () => {\r\n    try {\r\n      const updatedProfile = { ...selectedProfile};\r\n      await updateProfile(updatedProfile);\r\n      console.log(updatedProfile)\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteProfile = async () => {\r\n    try {\r\n      await deleteProfile(selectedProfile.profileId);\r\n    } catch (error) {\r\n      console.error('Error deleting profile:', error);\r\n    }\r\n  };\r\n\r\n  const handleGenderToggle = () => {\r\n    setSelectedProfile(prevProfile => ({\r\n      ...prevProfile,\r\n      profileGender: prevProfile.profileGender === 'Male' ? 'Female' : 'Male',\r\n    }));\r\n  };  \r\n\r\n  const navigateToCreate = () => {\r\n    navigation.navigate('CreateProfile');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-[30%] justify-center\">\r\n\r\n          <Text className = \"text-center text-white\">Select a Profile:</Text>\r\n\r\n            <View className = \"flex-row h-[20%] justify-center space-x-2\">\r\n              <View className = \"w-[60%] h-full border-2 border-sky-500 bg-white self-center justify-center\">\r\n                <Picker\r\n                  selectedValue={selectedProfile ? selectedProfile.profileId.toString() : ''}\r\n                  onValueChange={(itemValue) => handleProfileSelect(profiles.find(item => item.profileId.toString() === itemValue))}\r\n                >\r\n                  {profiles.map((item) => (\r\n                    <Picker.Item\r\n                      key={item.profileId.toString()}\r\n                      label={item.profileName}\r\n                      value={item.profileId.toString()}\r\n                    />\r\n                  ))}\r\n                </Picker>\r\n              </View>\r\n\r\n              <View className = \"w-[20%] h-[100%] bg-white border-2 border-green-500 rounded-full justify-center\">\r\n                <TouchableOpacity onPress={navigateToCreate}> \r\n                  <Text className = \"text-black text-base text-center\">Add New</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n\r\n          </View>\r\n\r\n          {selectedProfile && (\r\n          <View className = \"h-[70%]\">\r\n\r\n            {/* Profile Info */}\r\n            <View className = \"h-[60%] justify-center items-center\">\r\n\r\n              <Text className = \"text-white text-xl\">Profile Name</Text>\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center\"\r\n                  placeholder=\"Profile Name\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileName}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileName: text })}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Gender</Text>\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={handleGenderToggle}> \r\n                    <Text className = \"text-black text-base text-center\">Gender: {selectedProfile.profileGender}</Text>\r\n                  </TouchableOpacity>\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Goals</Text>\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center\"\r\n                  placeholder=\"Profile Goals\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileGoals}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileGoals: text })}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Objective</Text>\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center\"\r\n                  placeholder=\"Profile Objective\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileObjective}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileObjective: text })}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Intervention</Text>\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full text-black text-base text-center\"\r\n                  placeholder=\"Profile Intervention\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileIntervention}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileIntervention: text })}\r\n                />\r\n              </View>\r\n\r\n            </View>\r\n\r\n            {/* Footer */}\r\n\r\n            <View className = \"flex-row h-[40%] justify-center items-center space-x-4\">\r\n\r\n              <View className = \"w-[40%] h-[30%] bg-white/20 border-2 border-white rounded-full justify-center items-center\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleUpdateProfile}>\r\n                  <Text className = \"text-white text-xl text-center\">Update</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <View className = \"w-[40%] h-[30%] bg-white border-2 border-white rounded-full justify-center items-center\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleDeleteProfile}>\r\n                  <Text className = \"text-black text-xl text-center\">Delete</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              </View>\r\n\r\n          </View>)}\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default ViewTherapistProfileScreen","import React from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native';\r\nimport { signOut } from 'firebase/auth';\r\nimport { FIREBASE_AUTH } from '../../components/FirebaseConfig';\r\nimport { useServerContext } from '../../components/ServerContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nconst SettingsScreen = () => {\r\n  const { accountType, changeAccountType, profileOwner } = useServerContext();\r\n\r\n  const handleSignOut = async () => {\r\n    try {\r\n      const auth = FIREBASE_AUTH;\r\n      await signOut(auth);\r\n    } catch (error) {\r\n      console.error('Error signing out:', error);\r\n    }\r\n  };\r\n\r\n  const handleAccountTypeChange = (newAccountType) => {\r\n    changeAccountType(profileOwner, newAccountType);\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-full w-full justify-center items-center space-y-4\">\r\n\r\n            <View className = \"h-[20%]\"/>\r\n\r\n            <View className = \"h-[60%] w-full justify-center items-center space-y-2\">\r\n\r\n              <Text className = \"text-white text-xl text-center\">Account Type:</Text>\r\n\r\n              {accountType == 'Host Home' ? (\r\n                <View className = \"w-[75%] h-[10%] bg-white border-2 border-green-500 rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={() => handleAccountTypeChange('Host Home')}> \r\n                    <Text className = \"text-black text-base text-center\">Host Home</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              ) : (\r\n                <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={() => handleAccountTypeChange('Host Home')}> \r\n                    <Text className = \"text-black text-base text-center\">Host Home</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              )}\r\n\r\n              {accountType == 'Therapist' ? (\r\n                <View className = \"w-[75%] h-[10%] bg-white border-2 border-green-500 rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={() => handleAccountTypeChange('Therapist')}> \r\n                    <Text className = \"text-black text-base text-center\">Therapist</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              ) : (\r\n                <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={() => handleAccountTypeChange('Therapist')}> \r\n                    <Text className = \"text-black text-base text-center\">Therapist</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              )}\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[20%] w-full items-center\">\r\n              <View className = \"w-[75%] h-[50%] bg-white rounded-full justify-center\">\r\n                <TouchableOpacity onPress={handleSignOut}> \r\n                  <Text className = \"text-black text-base text-center\">Sign Out</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n\r\n          </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default SettingsScreen;\r\n","import React from 'react';\r\nimport { View, Text, TouchableOpacity} from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useServerContext } from '../../components/ServerContext';\r\nimport { useServerURL } from '../../components/ServerURLContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nconst PurchaseScreen = () => {\r\n  const { profileOwner } = useServerContext();\r\n  const navigation = useNavigation();\r\n  const serverURL = useServerURL();\r\n\r\n  const handlePurchase = async (productTitle) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/common/checkout`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ \r\n          productTitle: productTitle,\r\n          profileOwner: profileOwner,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data.url) {\r\n        navigation.navigate('StripeCheckout', { checkoutUrl: data.url });\r\n      } else {\r\n        console.log('Unable to connect to stripe.')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during checkout:', error);\r\n    }\r\n  };\r\n\r\n  const navigateToGenerate = async () => {\r\n    navigation.goBack();\r\n  };  \r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n        <View className = \"w-full h-full justify-center items-center\">\r\n\r\n          <View className = \"w-[75%] h-[10%] bg-white rounded-full m-2\">\r\n            <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handlePurchase('Credits1')}>\r\n              <View className = \"flex-row\">\r\n                <Text className = \"w-[60%] text-black text-xl text-center\">1 Credit</Text>\r\n                <Text className = \"w-[40%] text-black text-xl text-center\">$5.99</Text>\r\n              </View>\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n          <View className = \"w-[75%] h-[10%] bg-white rounded-full m-2\">\r\n            <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handlePurchase('Credits5')}>\r\n              <View className = \"flex-row\">\r\n                <Text className = \"w-[60%] text-black text-xl text-center\">5 Credits</Text>\r\n                <Text className = \"w-[40%] text-black text-xl text-center\">$24.99</Text>\r\n              </View>\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n          <View className = \"w-[75%] h-[10%] bg-white rounded-full m-2\">\r\n            <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handlePurchase('Credits15')}>\r\n              <View className = \"flex-row\">\r\n                <Text className = \"w-[60%] text-black text-xl text-center\">15 Credits</Text>\r\n                <Text className = \"w-[40%] text-black text-xl text-center\">$59.99</Text>\r\n              </View>\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n          <View className = \"w-[75%] h-[10%] bg-white rounded-full m-2\">\r\n            <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handlePurchase('Credits30')}>\r\n              <View className = \"flex-row\">\r\n                <Text className = \"w-[60%] text-black text-xl text-center\">30 Credits</Text>\r\n                <Text className = \"w-[40%] text-black text-xl text-center\">$99.99</Text>\r\n              </View>\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n          <View className = \"w-[75%] h-[10%] bg-white rounded-full m-2\">\r\n            <TouchableOpacity className = \"w-full h-full justify-center\" onPress={navigateToGenerate}>\r\n                <Text className = \" text-black text-xl text-center\">Go Back</Text>\r\n            </TouchableOpacity>\r\n          </View>\r\n\r\n        </View>\r\n\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default PurchaseScreen;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport * as WebBrowser from 'expo-web-browser';\r\n\r\nconst StripeCheckoutScreen = ({ route }) => {\r\n  const { checkoutUrl } = route.params;\r\n  const [result, setResult] = useState(null);\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    const openBrowserAsync = async () => {\r\n      try {\r\n        let result = await WebBrowser.openBrowserAsync(checkoutUrl);\r\n        setResult(result);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n    openBrowserAsync();\r\n    navigation.navigate('Purchase');\r\n  }, [checkoutUrl]); \r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <Text>{result && JSON.stringify(result)}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default StripeCheckoutScreen;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Text, View, Image } from 'react-native';\r\nimport { useServerContext } from '../components/ServerContext';\r\nimport { HostHomeProfileProvider } from '../components/HostHomeProfileContext'\r\nimport { TherapistProfileProvider } from '../components/TherapistProfileContext'\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport CreateHostHomeProfileScreen from './HostHomeScreens/CreateHostHomeProfileScreen'\r\nimport GenerateHostHomeNotesScreen from './HostHomeScreens/GenerateHostHomeNotesScreen'\r\nimport ViewHostHomeProfileScreen from './HostHomeScreens/ViewHostHomeProfileScreen'\r\nimport CreateTherapistProfileScreen from './TherapistScreens/CreateTherapistProfileScreen'\r\nimport GenerateTherapistNotesScreen from './TherapistScreens/GenerateTherapistNotesScreen'\r\nimport ViewTherapistProfileScreen from './TherapistScreens/ViewTherapistProfileScreen'\r\nimport SettingsScreen from './CommonScreens/SettingsScreen';\r\nimport PurchaseScreen from './CommonScreens/PurchaseScreen'\r\nimport StripeCheckoutScreen from './CommonScreens/StripeCheckoutScreen'\r\nimport { widthPercentageToDP as wp } from 'react-native-responsive-screen';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nconst MainNavigator = () => {\r\n  const { accountType, profileOwner } = useServerContext();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (accountType !== null) {\r\n      setLoading(false);\r\n    }\r\n  }, [accountType]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n            <View className = \"h-full w-full justify-center\">\r\n            <Text className = \"text-white text-3xl text-center\">Loading.. Please wait</Text>\r\n            </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n    );\r\n  }\r\n\r\n  const Stack = createNativeStackNavigator();\r\n  const Tab = createBottomTabNavigator();\r\n\r\n  const HostHomeStack = () => {\r\n    return (\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        <Stack.Screen name=\"CreateHostHome\" component={GenerateHostHomeNotesScreen}/>\r\n        <Stack.Screen name=\"Purchase\" component={PurchaseScreen}/>\r\n        <Stack.Screen name=\"StripeCheckout\" component={StripeCheckoutScreen}/>\r\n      </Stack.Navigator>\r\n     );\r\n  };\r\n\r\n  const TherapistStack = () => {\r\n    return (\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        <Stack.Screen name=\"CreateTherapist\" component={GenerateTherapistNotesScreen}/>\r\n        <Stack.Screen name=\"Purchase\" component={PurchaseScreen}/>\r\n        <Stack.Screen name=\"StripeCheckout\" component={StripeCheckoutScreen}/>\r\n      </Stack.Navigator>\r\n     );\r\n  };\r\n\r\n  const HostHomeProfileStack = () => {\r\n    return (\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        <Stack.Screen name=\"ViewProfile\" component={ViewHostHomeProfileScreen}/>\r\n        <Stack.Screen name=\"CreateProfile\" component={CreateHostHomeProfileScreen}/>\r\n      </Stack.Navigator>\r\n     );\r\n  };\r\n\r\n  const TherapistProfileStack = () => {\r\n    return (\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        <Stack.Screen name=\"ViewProfile\" component={ViewTherapistProfileScreen}/>\r\n        <Stack.Screen name=\"CreateProfile\" component={CreateTherapistProfileScreen}/>\r\n      </Stack.Navigator>\r\n     );\r\n  };\r\n\r\n  if (accountType === 'Host Home') {\r\n\r\n    return (\r\n      <HostHomeProfileProvider profileOwner={profileOwner}>\r\n        <Tab.Navigator \r\n          initialRouteName=\"Profiles\"\r\n          screenOptions={{\r\n            headerShown: false,\r\n            tabBarStyle: {\r\n              backgroundColor: 'white',\r\n              borderColor: 'black',\r\n              width: wp(100),\r\n              maxWidth: 1080, // Set the specific width for the tab bar\r\n              alignSelf: 'center',\r\n          },\r\n          tabBarIconStyle: {\r\n            alignItems: 'center', // Center content vertically\r\n            justifyContent: 'center', // Center content horizontally\r\n          },\r\n            \r\n          }}>\r\n          <Tab.Screen \r\n            name=\"Generate\" \r\n            component={HostHomeStack} \r\n            options={{\r\n              tabBarIcon: ({ color, size }) => (\r\n                <Image\r\n                  source={require('../../assets/navicons/edit.png')}\r\n                  style={{ width: size, height: size, tintColor: color }}\r\n                />\r\n              ),\r\n            }}/>\r\n          <Tab.Screen \r\n            name=\"Profiles\" \r\n            component={HostHomeProfileStack} \r\n            options={{\r\n              tabBarIcon: ({ color, size }) => (\r\n                <Image\r\n                  source={require('../../assets/navicons/user.png')}\r\n                  style={{ width: size, height: size, tintColor: color }}\r\n                />\r\n              ),\r\n            }}\r\n          />\r\n          <Tab.Screen \r\n            name=\"Settings\" \r\n            component={SettingsScreen}\r\n            options={{\r\n              tabBarIcon: ({ color, size }) => (\r\n                <Image\r\n                  source={require('../../assets/navicons/settings.png')}\r\n                  style={{ width: size, height: size, tintColor: color }}\r\n                />\r\n              ),\r\n            }}/>\r\n        </Tab.Navigator>\r\n      </HostHomeProfileProvider>\r\n    );\r\n\r\n  } else if (accountType === 'Therapist') {\r\n\r\n    return (\r\n      <TherapistProfileProvider profileOwner={profileOwner}>\r\n        <Tab.Navigator \r\n          initialRouteName=\"Generate\"\r\n          screenOptions={{\r\n            headerShown: false,\r\n            tabBarStyle: {\r\n              backgroundColor: 'white',\r\n              borderColor: 'black',\r\n              width: wp(100),\r\n              maxWidth: 1080, // Set the specific width for the tab bar\r\n              alignSelf: 'center',\r\n          },\r\n          tabBarIconStyle: {\r\n            alignItems: 'center', // Center content vertically\r\n            justifyContent: 'center', // Center content horizontally\r\n          },\r\n            \r\n          }}>\r\n            <Tab.Screen \r\n              name=\"Generate\" \r\n              component={TherapistStack} \r\n              options={{\r\n                tabBarIcon: ({ color, size }) => (\r\n                  <Image\r\n                    source={require('../../assets/navicons/edit.png')}\r\n                    style={{ width: size, height: size, tintColor: color }}\r\n                  />\r\n                ),\r\n              }}/>\r\n            {/* <Tab.Screen \r\n              name=\"Profiles\" \r\n              component={TherapistProfileStack} \r\n              options={{\r\n                tabBarIcon: ({ color, size }) => (\r\n                  <Image\r\n                    source={require('../../assets/navicons/user.png')}\r\n                    style={{ width: size, height: size, tintColor: color }}\r\n                  />\r\n                ),\r\n              }}/> */}\r\n            <Tab.Screen \r\n              name=\"Settings\" \r\n              component={SettingsScreen} \r\n              options={{\r\n                tabBarIcon: ({ color, size }) => (\r\n                  <Image\r\n                    source={require('../../assets/navicons/settings.png')}\r\n                    style={{ width: size, height: size, tintColor: color }}\r\n                  />\r\n                ),\r\n              }}/>\r\n        </Tab.Navigator>\r\n      </TherapistProfileProvider>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default MainNavigator;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { onAuthStateChanged } from 'firebase/auth';\r\nimport { FIREBASE_AUTH } from '../components/FirebaseConfig';\r\nimport { ServerURLProvider } from '../components/ServerURLContext';\r\nimport { ServerProvider } from '../components/ServerContext';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport SignInScreen from './AuthScreens/SignInScreen';\r\nimport SignUpScreen from './AuthScreens/SignUpScreen';\r\nimport ForgotPasswordScreen from './AuthScreens/ForgotPasswordScreen';\r\nimport MainNavigator from './MainNavigator';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nconst RootNavigator = () => {\r\n  \r\n  const serverURL = 'https://easyetch.onrender.com';\r\n\r\n  // Production: 'https://easyetch.onrender.com';\r\n  // Testing: 'http://10.0.0.70:5000'\r\n\r\n  const [profileOwner, setProfileOwner] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(FIREBASE_AUTH, async (user) => {\r\n      if (user) {\r\n        setProfileOwner(user.email);\r\n      } else {\r\n        setProfileOwner(null);\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  return (\r\n    <ServerURLProvider serverURL={serverURL}> \r\n      <NavigationContainer>\r\n        {profileOwner ? (\r\n        <ServerProvider profileOwner={profileOwner}>\r\n          <MainNavigator />\r\n        </ServerProvider>\r\n        ) : (\r\n          <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n            <Stack.Screen name=\"SignIn\" component={SignInScreen} />\r\n            <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\r\n            <Stack.Screen name=\"ForgotPassword\" component={ForgotPasswordScreen} />\r\n          </Stack.Navigator>\r\n        )}\r\n      </NavigationContainer>\r\n    </ServerURLProvider>\r\n  );\r\n};\r\n\r\nexport default RootNavigator;\r\n","import { NativeWindStyleSheet } from \"nativewind\";\r\nimport RootNavigator from \"./src/screens/RootNavigator\";\r\n\r\nNativeWindStyleSheet.setOutput({\r\n  default: \"native\",\r\n});\r\n\r\nexport default function App() {\r\n  return (\r\n    <RootNavigator />\r\n  );\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [6], () => (__webpack_require__(5530)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["FIREBASE_APP","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","FIREBASE_AUTH","getAuth","ServerURLContext","createContext","useServerURL","useContext","ServerURLProvider","_ref","children","serverURL","_jsx","Provider","value","ServerContext","useServerContext","ServerProvider","profileOwner","_useState","useState","_useState2","_slicedToArray","credits","setCredits","_useState3","_useState4","accountType","setAccountType","fetchAccountType","_ref2","_asyncToGenerator","response","fetch","data","json","error","console","_x","apply","arguments","changeAccountType","_ref3","newAccountType","method","headers","body","JSON","stringify","updatedAccountType","_x2","_x3","fetchCredits","_ref4","_x4","reloadCredits","_ref5","creditsData","useEffect","fetchData","_ref6","navigation","useNavigation","email","setEmail","password","setPassword","_useState5","_useState6","setError","handleSignIn","auth","signInWithEmailAndPassword","_StyledComponent","className","component","View","_jsxs","colors","LinearGradient","source","require","Image","Text","placeholder","placeholderTextColor","onChangeText","text","secureTextEntry","TextInput","TouchableOpacity","onPress","navigate","_NativeWindStyleSheet","create","styles","CustomActionButton","buttonText","actionButton","actionButtonText","CustomInputField","inputField","inputFieldText","button","userType","setUserType","_useState7","_useState8","handleSignup","ok","status","atRules","childClasses","emailSent","setEmailSent","handlePasswordReset","sendPasswordResetEmail","message","HostHomeProfileContext","useHostHomeProfileContext","HostHomeProfileProvider","profiles","setProfiles","selectedProfile","setSelectedProfile","note","setNote","dayProgram","setDayProgram","fetchProfiles","Error","createProfile","newProfileData","_objectSpread","log","concat","_toConsumableArray","updateProfile","updatedProfile","profileId","updatedProfileData","updatedProfiles","map","profile","deleteProfile","filter","length","profilesData","TherapistProfileContext","useTherapistProfileContext","TherapistProfileProvider","behavior","setBehavior","_useState9","_useState10","intervention","setIntervention","_useState11","_useState12","setResponse","_useState13","_useState14","plan","setPlan","profileName","setProfileName","profileGender","setProfileGender","profileGoals","setProfileGoals","morningMedication","setMorningMedication","afternoonMedication","setAfternoonMedication","nightMedication","setNightMedication","activity","setActivity","_useState15","_useState16","activities","setActivities","handleProfileCreation","trim","prevGender","prevActivities","FlatList","renderItem","item","index","ScrollView","_","i","handleDeleteActivity","keyExtractor","toString","_useHostHomeProfileCo","_useServerContext","loading","setLoading","handleCopy","Clipboard","setStringAsync","Alert","alert","handleGenerate","generatedText","remainingCredits","handleSave","formattedDate","currentDate","Date","month","getMonth","day","getDate","year","getFullYear","String","padStart","getCurrentDate","filename","blob","Blob","type","link","document","createElement","href","window","URL","createObjectURL","download","click","Picker","selectedValue","onValueChange","itemValue","find","Item","label","newActivity","setNewActivity","handleUpdateProfile","handleDeleteProfile","prevProfile","updatedActivities","dispositions","selectedDisposition","toggleDisposition","searchTerm","setSearchTerm","filteredDispositions","disposition","toLowerCase","includes","style","flex","dispositionButton","selectedDispositionButton","backgroundColor","padding","margin","behaviorDispositions","interventionDispositions","_useTherapistProfileC","selectedBehaviorDispositions","setSelectedBehaviorDispositions","selectedInterventionDispositions","setSelectedInterventionDispositions","combinedText","DispositionContainer","handleSignOut","signOut","handleAccountTypeChange","handlePurchase","productTitle","url","checkoutUrl","navigateToGenerate","goBack","route","params","result","setResult","openBrowserAsync","WebBrowser","Stack","createNativeStackNavigator","Tab","createBottomTabNavigator","Navigator","initialRouteName","screenOptions","headerShown","tabBarStyle","borderColor","width","wp","maxWidth","alignSelf","tabBarIconStyle","alignItems","justifyContent","Screen","name","GenerateHostHomeNotesScreen","PurchaseScreen","StripeCheckoutScreen","options","tabBarIcon","color","size","height","tintColor","ViewHostHomeProfileScreen","CreateHostHomeProfileScreen","SettingsScreen","GenerateTherapistNotesScreen","setProfileOwner","unsubscribe","onAuthStateChanged","user","NavigationContainer","MainNavigator","SignInScreen","SignUpScreen","ForgotPasswordScreen","App","RootNavigator","NativeWindStyleSheet","setOutput","default","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","id","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","leafPrototypes","getProto","getPrototypeOf","obj","t","mode","this","then","ns","def","current","indexOf","getOwnPropertyNames","forEach","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","push","__webpack_exports__"],"sourceRoot":""}