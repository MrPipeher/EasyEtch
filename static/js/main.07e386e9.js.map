{"version":3,"file":"static/js/main.07e386e9.js","mappings":"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","sources":["src/components/FirebaseConfig.js","src/components/ServerURLContext.js","src/components/ServerContext.js","src/screens/AuthScreens/SignInScreen.js","src/screens/AuthScreens/SignUpScreen.js","src/screens/AuthScreens/ForgotPasswordScreen.js","src/components/HostHomeProfileContext.js","src/components/TherapistProfileContext.js","src/screens/HostHomeScreens/CreateHostHomeProfileScreen.js","src/screens/HostHomeScreens/GenerateHostHomeNotesScreen.js","src/screens/HostHomeScreens/ViewHostHomeProfileScreen.js","src/screens/TherapistScreens/CreateTherapistProfileScreen.js","src/components/DispositionContainer.js","src/screens/TherapistScreens/GenerateTherapistNotesScreen.js","src/screens/TherapistScreens/ViewTherapistProfileScreen.js","src/screens/CommonScreens/SettingsScreen.js","src/screens/CommonScreens/PurchaseScreen.js","src/screens/CommonScreens/StripeCheckoutScreen.js","src/screens/MainNavigator.js","src/screens/RootNavigator.js","App.js","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/create fake namespace object","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/node module decorator","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\nimport { getAuth } from \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBQuUaG_jhfDZpKTdEX2bDQi184lRiBFzg\",\r\n  authDomain: \"easyetch-2764f.firebaseapp.com\",\r\n  projectId: \"easyetch-2764f\",\r\n  storageBucket: \"easyetch-2764f.appspot.com\",\r\n  messagingSenderId: \"429626063303\",\r\n  appId: \"1:429626063303:web:e163bac12113c7b43c01e2\"\r\n};\r\n\r\n// initialize Firebase App\r\nconst FIREBASE_APP = initializeApp(firebaseConfig);\r\nconst FIREBASE_AUTH = getAuth(FIREBASE_APP);\r\n\r\nexport { FIREBASE_APP, FIREBASE_AUTH};","import React, { createContext, useContext } from 'react';\r\n\r\nconst ServerURLContext = createContext();\r\n\r\nexport const useServerURL = () => {\r\n  return useContext(ServerURLContext);\r\n};\r\n\r\nexport const ServerURLProvider = ({ children, serverURL }) => {\r\n  return (\r\n    <ServerURLContext.Provider value={serverURL}>\r\n      {children}\r\n    </ServerURLContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { useServerURL } from './ServerURLContext';\r\n\r\nconst ServerContext = createContext();\r\n\r\nexport const useServerContext = () => {\r\n  return useContext(ServerContext);\r\n};\r\n\r\nexport const ServerProvider = ({ children, profileOwner }) => {\r\n  const [credits, setCredits] = useState(null);\r\n  const [accountType, setAccountType] = useState(null);\r\n  const serverURL = useServerURL();\r\n  const [status, setStatus] = useState(null);\r\n  const [usage, setUsage] = useState(null);\r\n  const [limit, setLimit] = useState(null);\r\n  const [tier, setTier] = useState(null);\r\n  const [subscriptionType, setSubscriptionType] = useState(null);\r\n  const [formattedBillingCycleEnd, setFormattedBillingCycleEndDate] = useState(null);\r\n\r\n  const fetchAccountType = async (profileOwner) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/common/getAccountType?profileOwner=${profileOwner}`);\r\n      const data = await response.json();\r\n      setAccountType(data.accountType);\r\n      fetchSubscriptionData(profileOwner, data.accountType);\r\n    } catch (error) {\r\n      console.error('Error fetching account type:', error);\r\n    }\r\n  };\r\n\r\n  const changeAccountType = async (profileOwner, newAccountType) => {\r\n\r\n    //Prevent Spam\r\n    if (newAccountType == accountType) return;\r\n\r\n    try {\r\n      const response = await fetch(`${serverURL}/common/changeAccountType`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner: profileOwner,\r\n          newAccountType: newAccountType\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      setAccountType(data.updatedAccountType);\r\n      fetchSubscriptionData(profileOwner, data.updatedAccountType);\r\n    } catch (error) {\r\n      console.error('Error changing account type:', error);\r\n    }\r\n  };\r\n\r\n  const fetchCredits = async (profileOwner) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/common/credits?profileOwner=${profileOwner}`);\r\n      const data = await response.json();\r\n      setCredits(data);\r\n    } catch (error) {\r\n      console.error('Error fetching credits:', error);\r\n    }\r\n  };\r\n\r\n  const fetchSubscriptionData = async (profileOwner, accountType) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/common/getSubscription`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner: profileOwner,\r\n          subscriptionType: accountType,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      const { billingCycleEnd, status, usage, limit, tier, subscriptionType } = data.subData;\r\n\r\n      const billingCycleEndTimestamp = billingCycleEnd;\r\n      const billingCycleEndDate = new Date(billingCycleEndTimestamp._seconds * 1000);\r\n      const month = (billingCycleEndDate.getMonth() + 1).toString().padStart(2, '0');\r\n      const day = billingCycleEndDate.getDate().toString().padStart(2, '0');\r\n      const year = billingCycleEndDate.getFullYear();\r\n      setFormattedBillingCycleEndDate(`${month}/${day}/${year}`);\r\n\r\n      setStatus(status);\r\n      setUsage(usage);\r\n      setLimit(limit);\r\n      setTier(tier);\r\n      setSubscriptionType(subscriptionType);\r\n\r\n    } catch (error) {\r\n      console.error('Error fetching subscription data:', error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        await fetchAccountType(profileOwner);\r\n        await fetchCredits(profileOwner);\r\n      } catch (error) {\r\n        console.error('Error fetching account data:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [profileOwner]);\r\n\r\n  return (\r\n    <ServerContext.Provider \r\n      value={{ \r\n          serverURL,\r\n          profileOwner,\r\n          credits,\r\n          setCredits,\r\n          accountType,\r\n          changeAccountType,\r\n          formattedBillingCycleEnd,\r\n          status,\r\n          setStatus,\r\n          usage,\r\n          setUsage,\r\n          limit,\r\n          setLimit,\r\n          tier,\r\n          setTier,\r\n          subscriptionType,\r\n          setSubscriptionType,\r\n        }}>\r\n      {children}\r\n    </ServerContext.Provider>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { View, Image, Text, TouchableOpacity, TextInput} from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { FIREBASE_AUTH } from '../../components/FirebaseConfig';\r\nimport { signInWithEmailAndPassword, signOut } from 'firebase/auth';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nconst SignInScreen = () => {\r\n  const navigation = useNavigation();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const handleSignIn = async () => {\r\n    try {\r\n      const auth = FIREBASE_AUTH;\r\n      const credentials = await signInWithEmailAndPassword(auth, email, password);\r\n\r\n      if (!credentials.user.emailVerified) {\r\n        setError('Please verify your email before logging in.');\r\n        await signOut(FIREBASE_AUTH);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('Error signing in:', error);\r\n      setError('Invalid email or password.');\r\n    }\r\n  };\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setIsPasswordVisible(!isPasswordVisible);\r\n  };\r\n\r\n  const navigateToSignUp = () => {\r\n    navigation.navigate('SignUp');\r\n  };\r\n\r\n  const navigateToForgotPassword = () => {\r\n    navigation.navigate('ForgotPassword');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          {/* Header */}\r\n          <View className = \"h-[40%] justify-center items-center\">\r\n\r\n            {/* Logo */}\r\n            <Image \r\n              className = \"w-[60%] h-[100%] absolute\"\r\n              source={require('../../../assets/images/Logo.png')} \r\n            />\r\n\r\n          </View>\r\n\r\n          {/* Container */}\r\n          <View className = \"h-[50%] w-full justify-center items-center\">\r\n\r\n            {error && (\r\n              <Text className = \"text-red-500 text-base m-2\">{error}</Text>\r\n            )}\r\n\r\n            <View className = \"w-[75%] h-[20%] bg-white/75 rounded-full justify-center my-2\">\r\n              <TextInput\r\n                  className=\"h-full w-full text-black text-xl text-center self-center\"\r\n                  placeholder=\"Email\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setEmail(text)}\r\n                  value={email}\r\n                  secureTextEntry={false}\r\n              />\r\n            </View>\r\n\r\n            <View className = \"w-[75%] h-[20%] bg-white/75 rounded-full justify-center my-2\">\r\n                <TextInput\r\n                    className=\"h-full w-full text-black text-xl text-center self-center\"\r\n                    placeholder=\"Password\"\r\n                    placeholderTextColor={'gray'}\r\n                    onChangeText={(text) => setPassword(text)}\r\n                    value={password}\r\n                    secureTextEntry={!isPasswordVisible}\r\n                />\r\n\r\n                <TouchableOpacity\r\n                  style={{ position: 'absolute', right: 20, top: '50%', transform: [{ translateY: -12.5 }] }}\r\n                  onPress={togglePasswordVisibility}\r\n                >\r\n                  <Image\r\n                    source={require('../../../assets/password.png')}\r\n                    style={{ width: 25, height: 25 }}\r\n                  />\r\n                </TouchableOpacity>\r\n\r\n            </View>\r\n            \r\n\r\n            <View className=\"w-[50%] h-[15%] border-white border-2 bg-sky-400/50 rounded-xl justify-center my-2\">\r\n              <TouchableOpacity onPress={handleSignIn}>\r\n                  <Text className=\"text-white text-xl text-center\">Sign In</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n            <View className=\"w-[50%] h-[15%] border-sky-500 border-2 bg-white rounded-xl justify-center my-2\">\r\n                <TouchableOpacity onPress={navigateToSignUp}>\r\n                    <Text className=\"text-sky-500 text-xl text-center\">Sign Up</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n\r\n          </View>\r\n\r\n          {/* Footer */}\r\n          <View className = \"h-[5%] justify-center items-center\">\r\n\r\n            <TouchableOpacity onPress={navigateToForgotPassword}>\r\n              <Text className = \"text-white text-2xl\">Forgot password?</Text>\r\n            </TouchableOpacity>\r\n\r\n          </View>\r\n\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default SignInScreen;\r\n","import React, { useState } from 'react';\r\nimport { View, Image, Text, TouchableOpacity, TextInput} from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useServerURL } from '../../components/ServerURLContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { FIREBASE_AUTH } from '../../components/FirebaseConfig';\r\nimport { signInWithEmailAndPassword, sendEmailVerification, signOut } from 'firebase/auth';\r\n\r\nconst SignUpScreen = () => {\r\n  const navigation = useNavigation();\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [userType, setUserType] = useState('Host Home');\r\n  const [isPasswordVisible, setIsPasswordVisible] = useState(false);\r\n  const serverURL = useServerURL();\r\n  const [error, setError] = useState(null);\r\n  const [canSignIn, setCanSignIn] = useState(false);\r\n\r\n  const handleSignup = async () => {\r\n    setCanSignIn(false);\r\n\r\n    try {\r\n      const response = await fetch(`${serverURL}/common/signup`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email, password, userType }),\r\n      });\r\n\r\n      if (response.ok) {\r\n\r\n        await signInWithEmailAndPassword(FIREBASE_AUTH, email, password);\r\n        setError('An email verification has been sent to your email address.');\r\n        await sendEmailVerification(FIREBASE_AUTH.currentUser);\r\n\r\n        setCanSignIn(true);\r\n\r\n      } else {\r\n        if (response.status == 500) {\r\n          setError('This Email already exists. If you just verified the address, click \"go back\" and sign in.');\r\n        } else {\r\n          setError('Error connecting to server.');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error signing up:', error);\r\n    }\r\n  };\r\n\r\n  const navigateToSignIn = async () => {\r\n    if (canSignIn) {\r\n      await signOut(FIREBASE_AUTH);\r\n      setCanSignIn(false);      \r\n      navigation.navigate('SignIn');\r\n    }\r\n  };\r\n\r\n  const togglePasswordVisibility = () => {\r\n    setIsPasswordVisible(!isPasswordVisible);\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          {/* Title */}\r\n          <View className = \"h-[5%]\"/>\r\n\r\n          {/* Header */}\r\n          <View className = \"h-[25%] w-full justify-center items-center\">\r\n\r\n            {/* Logo */}\r\n            <Image \r\n              className = \"w-[30%] h-[70%] absolute\"\r\n              source={require('../../../assets/images/Logo.png')} \r\n            />\r\n\r\n          </View>\r\n\r\n          {/* Picker */}\r\n          <View className = \"h-[20%] justify-center items-center\">\r\n\r\n            <View className = \"w-full h-full items-center justify-center\">\r\n\r\n              <Text className = \"text-white text-2xl text-center\">Account Type:</Text>\r\n\r\n              <View className = \"flex-row h-full w-full justify-center items-center space-x-8\">\r\n\r\n                {userType === 'Host Home' ? (\r\n                  <View className = \"w-[30%] h-[50%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setUserType('Therapist')}>\r\n                      <Text className = \"text-white text-xl text-center\">Host Home</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[50%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setUserType('Host Home')}>\r\n                      <Text className = \"text-white text-xl text-center\">Host Home</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n\r\n                {userType === 'Therapist' ? (\r\n                  <View className = \"w-[30%] h-[50%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setUserType('Host Home')}>\r\n                      <Text className = \"text-white text-xl text-center\">Therapist</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[50%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setUserType('Therapist')}>\r\n                      <Text className = \"text-white text-xl text-center\">Therapist</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n              </View>\r\n              \r\n            </View>\r\n\r\n          </View>\r\n\r\n          {/* Container */}\r\n          <View className = \"h-[30%] justify-center items-center\">\r\n\r\n            {error && (\r\n              <Text className = \"text-red-500 text-xl text-center m-2\">{error}</Text>\r\n            )}\r\n\r\n            <View className = \"w-[75%] h-[20%] bg-white/75 rounded-full justify-center my-2\">\r\n              <TextInput\r\n                  className=\"h-full w-full text-black text-xl text-center self-center\"\r\n                  placeholder=\"Email\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setEmail(text)}\r\n                  value={email}\r\n                  secureTextEntry={false}\r\n              />\r\n            </View>\r\n\r\n            <View className = \"w-[75%] h-[20%] bg-white/75 rounded-full justify-center my-2\">\r\n              <TextInput\r\n                  className=\"h-full w-full text-black text-xl text-center self-center\"\r\n                  placeholder=\"Password\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setPassword(text)}\r\n                  value={password}\r\n                  secureTextEntry={!isPasswordVisible}\r\n              />\r\n\r\n              <TouchableOpacity\r\n                style={{ position: 'absolute', right: 20, top: '50%', transform: [{ translateY: -12.5 }] }}\r\n                onPress={togglePasswordVisibility}\r\n              >\r\n                <Image\r\n                  source={require('../../../assets/password.png')}\r\n                  style={{ width: 25, height: 25 }}\r\n                />\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n            <View className=\"w-[50%] h-[30%] border-white border-2 bg-sky-400/50 rounded-xl justify-center my-2\">\r\n                <TouchableOpacity onPress={handleSignup}>\r\n                    <Text className=\"text-white text-xl text-center\">Sign Up</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n\r\n          </View>\r\n\r\n          {/* Footer */}\r\n          <View className = \"h-[20%] justify-center items-center\">\r\n\r\n            <View className = \"w-[40%] h-[30%] bg-white border-2 border-sky-500 rounded-full justify-center items-center\">\r\n              <TouchableOpacity className = \"w-full h-full justify-center\" onPress={navigateToSignIn}>\r\n                <Text className = \"text-black text-xl text-center\">Go Back</Text>\r\n              </TouchableOpacity>\r\n            </View>\r\n\r\n          </View>\r\n\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default SignUpScreen;\r\n","import React, {useState} from 'react';\r\nimport { View, Text, TouchableOpacity, TextInput } from 'react-native';\r\nimport { FIREBASE_AUTH } from '../../components/FirebaseConfig';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { sendPasswordResetEmail } from 'firebase/auth';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst ForgotPasswordScreen = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [emailSent, setEmailSent] = useState(false);\r\n  const navigation = useNavigation();\r\n\r\n  const handlePasswordReset = async () => {\r\n    try {\r\n      const auth = FIREBASE_AUTH;\r\n      await sendPasswordResetEmail(auth, email);\r\n      setEmailSent(true);\r\n    } catch (error) {\r\n      // Handle errors\r\n      console.error('Error sending password reset email:', error.message);\r\n    }\r\n  };\r\n\r\n  const navigateToSignIn = () => {\r\n    navigation.navigate('SignIn');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-full w-full justify-center items-center space-y-4\">\r\n\r\n            <View className = \"h-[20%]\"/>\r\n\r\n            <View className = \"h-[50%] w-full justify-center items-center space-y-4\">\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Enter your Email\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={email}\r\n                  onChangeText={setEmail}\r\n                />\r\n              </View>\r\n\r\n              <View className = \"w-[50%] h-[10%] bg-sky-400/50 border-2 border-white rounded-full justify-center\">\r\n                <TouchableOpacity className = \"h-full w-full justify-center\" onPress={handlePasswordReset}> \r\n                  <Text className = \"text-white text-xl text-center\">Send Instructions</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              {emailSent ? <Text className = \"text-center text-white text-2xl\">Please check your email for instructions on resetting your password.</Text> : null}\r\n            </View>\r\n\r\n            <View className = \"h-[30%] w-full items-center\">\r\n\r\n              <View className = \"w-[25%] h-[20%] bg-white rounded-full justify-center\">\r\n                <TouchableOpacity className = \"h-full w-full justify-center\" onPress={navigateToSignIn}> \r\n                  <Text className = \"text-black text-xl text-center\">Go Back</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n            </View>\r\n\r\n          </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ForgotPasswordScreen;\r\n","import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { useServerURL } from './ServerURLContext';\r\n\r\nconst HostHomeProfileContext = createContext();\r\n\r\nexport const useHostHomeProfileContext = () => {\r\n  return useContext(HostHomeProfileContext);\r\n};\r\n\r\nexport const HostHomeProfileProvider = ({ children, profileOwner }) => {\r\n  const serverURL = useServerURL();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [selectedProfile, setSelectedProfile] = useState(null);\r\n  const [note, setNote] = useState(null);\r\n  const [dayProgram, setDayProgram] = useState(false);\r\n\r\n  const fetchProfiles = async (profileOwner) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/hostHome/profiles?profileOwner=${profileOwner}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching profiles:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const createProfile = async (newProfileData) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/hostHome/createprofile`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner,\r\n          ...newProfileData,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        console.log('Profile created successfully:', data);\r\n        setProfiles([...profiles, data]);\r\n        setSelectedProfile(data);\r\n      } else {\r\n        console.error('Error creating profile:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating profile:', error);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (updatedProfile) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/hostHome/updateprofile`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner: profileOwner,\r\n          profileId: updatedProfile.profileId,\r\n          updatedProfileData: updatedProfile\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Profile updated successfully!');\r\n        const updatedProfiles = profiles.map(profile =>\r\n          profile.profileId === updatedProfile.profileId ? updatedProfile : profile\r\n        );\r\n        setProfiles(updatedProfiles);\r\n        setSelectedProfile(updatedProfile);\r\n      } else {\r\n        console.error('Failed to update profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n    }\r\n  };\r\n\r\n  const deleteProfile = async (profileId) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/hostHome/deleteprofile`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner: profileOwner,\r\n          profileId: profileId\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Profile deleted successfully!');\r\n        const updatedProfiles = profiles.filter(profile => profile.profileId !== profileId);\r\n        setProfiles(updatedProfiles);\r\n        if (selectedProfile && selectedProfile.profileId === profileId) {\r\n          setSelectedProfile(updatedProfiles.length > 0 ? updatedProfiles[0] : null);\r\n        }\r\n      } else {\r\n        console.error('Failed to delete profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting profile:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const profilesData = await fetchProfiles(profileOwner);\r\n        setProfiles(profilesData);\r\n        if (profilesData.length > 0) {\r\n          setSelectedProfile(profilesData[0]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching profiles:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [profileOwner]);\r\n\r\n  return (\r\n    <HostHomeProfileContext.Provider \r\n      value={{ \r\n          profileOwner,\r\n          profiles,\r\n          createProfile,\r\n          updateProfile,\r\n          deleteProfile,\r\n          selectedProfile,\r\n          setSelectedProfile,\r\n          note,\r\n          setNote,\r\n          dayProgram,\r\n          setDayProgram,\r\n        }}>\r\n      {children}\r\n    </HostHomeProfileContext.Provider>\r\n  );\r\n};\r\n","import React, { createContext, useContext, useEffect, useState } from 'react';\r\nimport { useServerURL } from './ServerURLContext';\r\n\r\nconst TherapistProfileContext = createContext();\r\n\r\nexport const useTherapistProfileContext = () => {\r\n  return useContext(TherapistProfileContext);\r\n};\r\n\r\nexport const TherapistProfileProvider = ({ children, profileOwner }) => {\r\n  const serverURL = useServerURL();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [selectedProfile, setSelectedProfile] = useState(null);\r\n  const [note, setNote] = useState(null);\r\n  const [behavior, setBehavior] = useState('');\r\n  const [intervention, setIntervention] = useState('');\r\n  const [response, setResponse] = useState('');\r\n  const [plan, setPlan] = useState('');\r\n\r\n  const fetchProfiles = async (profileOwner) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/therapist/profiles?profileOwner=${profileOwner}`);\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error fetching profiles:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const createProfile = async (newProfileData) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/therapist/createprofile`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner,\r\n          ...newProfileData,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n\r\n      if (response.ok) {\r\n        setProfiles([...profiles, data]);\r\n        setSelectedProfile(data);\r\n      } else {\r\n        console.error('Error creating profile:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error creating profile:', error);\r\n    }\r\n  };\r\n\r\n  const updateProfile = async (updatedProfile) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/therapist/updateprofile`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner: profileOwner,\r\n          profileId: updatedProfile.profileId,\r\n          updatedProfileData: updatedProfile\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Profile updated successfully!');\r\n        const updatedProfiles = profiles.map(profile =>\r\n          profile.profileId === updatedProfile.profileId ? updatedProfile : profile\r\n        );\r\n        setProfiles(updatedProfiles);\r\n        setSelectedProfile(updatedProfile);\r\n      } else {\r\n        console.error('Failed to update profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n    }\r\n  };\r\n\r\n  const deleteProfile = async (profileId) => {\r\n    try {\r\n      const response = await fetch(`${serverURL}/therapist/deleteprofile`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n          profileOwner: profileOwner,\r\n          profileId: profileId\r\n        })\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log('Profile deleted successfully!');\r\n        const updatedProfiles = profiles.filter(profile => profile.profileId !== profileId);\r\n        setProfiles(updatedProfiles);\r\n        if (selectedProfile && selectedProfile.profileId === profileId) {\r\n          setSelectedProfile(updatedProfiles.length > 0 ? updatedProfiles[0] : null);\r\n        }\r\n      } else {\r\n        console.error('Failed to delete profile');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error deleting profile:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const profilesData = await fetchProfiles(profileOwner);\r\n        setProfiles(profilesData);\r\n\r\n        if (profilesData.length > 0) {\r\n          setSelectedProfile(profilesData[0]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching profiles:', error);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [profileOwner]);\r\n\r\n  return (\r\n    <TherapistProfileContext.Provider \r\n      value={{ \r\n          profileOwner,\r\n          profiles,\r\n          createProfile,\r\n          updateProfile,\r\n          deleteProfile,\r\n          selectedProfile,\r\n          setSelectedProfile,\r\n          note,\r\n          setNote,\r\n          behavior,\r\n          setBehavior,\r\n          intervention,\r\n          setIntervention,\r\n          response,\r\n          setResponse,\r\n          plan,\r\n          setPlan,\r\n        }}>\r\n      {children}\r\n    </TherapistProfileContext.Provider>\r\n  );\r\n};\r\n","import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, FlatList, ScrollView } from 'react-native';\r\nimport { useHostHomeProfileContext } from '../../components/HostHomeProfileContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst CreateHostHomeProfileScreen = () => {\r\n  const { createProfile } = useHostHomeProfileContext();\r\n  const [profileName, setProfileName] = useState('');\r\n  const [profileGender, setProfileGender] = useState('Male');\r\n  const [profileGoals, setProfileGoals] = useState('');\r\n  const [morningMedication, setMorningMedication] = useState(false);\r\n  const [afternoonMedication, setAfternoonMedication] = useState(false);\r\n  const [nightMedication, setNightMedication] = useState(false);\r\n  const [activity, setActivity] = useState('');\r\n  const [activities, setActivities] = useState([]);\r\n  const navigation = useNavigation();\r\n\r\n  const handleProfileCreation = async () => {\r\n    if (!profileName.trim() || !profileGender.trim() || !profileGoals.trim()) {\r\n      console.error('All fields are required.');\r\n      return;\r\n    }\r\n\r\n    const newProfileData = {\r\n      profileName,\r\n      profileGender,\r\n      profileGoals,\r\n      morningMedication,\r\n      afternoonMedication,\r\n      nightMedication,\r\n      activities,\r\n    };\r\n\r\n    try {\r\n      await createProfile(newProfileData);\r\n\r\n      // Reset Fields\r\n      setProfileName('');\r\n      setProfileGender('Male');\r\n      setProfileGoals('');\r\n      setMorningMedication(false);\r\n      setAfternoonMedication(false);\r\n      setNightMedication(false);\r\n      setActivities([]);\r\n\r\n      navigateToView();\r\n\r\n    } catch (error) {\r\n      console.log('Error creating profile:', error.message);\r\n    }\r\n  };\r\n\r\n  const handleAddActivity = () => {\r\n    if (activity.trim()) {\r\n      setActivities(prevActivities => [...prevActivities, activity]);\r\n      setActivity('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteActivity = (index) => {\r\n    setActivities(prevActivities => prevActivities.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const handleGenderToggle = () => {\r\n    setProfileGender(prevGender => (prevGender === 'Male' ? 'Female' : 'Male'));\r\n  };\r\n\r\n  const navigateToView = () => {\r\n    navigation.navigate('ViewProfile');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n            \r\n            {/* Title */}\r\n            <View className = \"h-[10%]\"/>\r\n\r\n            {/* Profile Info */}\r\n            <View className = \"h-[20%] justify-center items-center\">\r\n        \r\n              <View className = \"w-[75%] h-[25%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Name\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileName(text)}\r\n                  value={profileName}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <View className = \"w-[75%] h-[25%] bg-white rounded-full justify-center my-2\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleGenderToggle}>\r\n                  <Text className = \"text-black text-base text-center\">Gender: {profileGender}</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <View className = \"w-[75%] h-[25%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Goals\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileGoals(text)}\r\n                  value={profileGoals}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n            </View>\r\n\r\n            {/* Medication */}\r\n            <View className = \"h-[15%] justify-center\">\r\n\r\n              <Text className = \"text-white text-xl text-center\">Medication Time:</Text>\r\n\r\n              <View className = \"flex-row h-[70%] justify-evenly items-center\">\r\n                {morningMedication ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setMorningMedication(!morningMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Morning</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setMorningMedication(!morningMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Morning</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n\r\n                {afternoonMedication ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setAfternoonMedication(!afternoonMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Afternoon</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setAfternoonMedication(!afternoonMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Afternoon</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n\r\n                {nightMedication  ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setNightMedication(!nightMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Night</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setNightMedication(!nightMedication)}>\r\n                      <Text className = \"text-white text-xl text-center\">Night</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n              </View>\r\n            </View>\r\n\r\n            {/* Activities */}\r\n            <View className = \"h-[40%]\">\r\n              <View className = \"flex-row h-[20%] justify-evenly items-center my-2\">\r\n\r\n                <View className = \"w-[60%] h-[100%] bg-white rounded-full\">\r\n                  <TextInput\r\n                    className=\"h-full w-full text-black text-base text-center\"\r\n                    placeholder=\"Add Activity\"\r\n                    placeholderTextColor={'gray'}\r\n                    onChangeText={(text) => setActivity(text)}\r\n                    value={activity}\r\n                    secureTextEntry={false}\r\n                  />\r\n                </View>\r\n                <View className = \"w-[30%] h-[100%] border-2 border-white rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleAddActivity}>\r\n                    <Text className = \"text-white text-xl text-center\">Save</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n              <View className = \"h-[70%] bg-white border-2 border-white rounded-2xl py-2 m-4\">\r\n                <FlatList\r\n                  data={activities}\r\n                  renderItem={({ item, index }) => (\r\n                    <ScrollView>\r\n                      <View className = \"flex-row\">\r\n\r\n                        <Text className = \"w-[75%] text-center text-black\">{item}</Text>\r\n\r\n                        <View className = \"w-[25%]\">\r\n                          <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handleDeleteActivity(index)}>\r\n                            <Text className = \"text-red-500 text-base text-center\">X</Text>\r\n                          </TouchableOpacity>\r\n                        </View>\r\n\r\n                      </View>\r\n                    </ScrollView>\r\n                  )}\r\n                  keyExtractor={(item, index) => index.toString()}\r\n                />\r\n              </View>\r\n            </View>\r\n\r\n            {/* Footer */}\r\n            <View className = \"h-[15%] flex-row items-center justify-evenly\">\r\n              <View className = \" h-[50%] w-[30%] bg-white/20 border-2 border-white rounded-full justify-center my-2\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleProfileCreation}>\r\n                  <Text className = \"text-white text-xl text-center\">Create</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <View className = \" h-[50%] w-[30%] bg-white rounded-full justify-center my-2\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={navigateToView}>\r\n                  <Text className = \"text-black text-xl text-center\">Go back</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default CreateHostHomeProfileScreen;\r\n","import { View, Text, ScrollView, TouchableOpacity, Alert} from 'react-native';\r\nimport React, { useState } from 'react'\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useHostHomeProfileContext } from '../../components/HostHomeProfileContext';\r\nimport { useServerContext } from '../../components/ServerContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Picker } from '@react-native-picker/picker';\r\nimport * as Clipboard from 'expo-clipboard';\r\n\r\nconst GenerateHostHomeNotesScreen = () => {\r\n  const navigation = useNavigation();\r\n  const { profiles, selectedProfile, setSelectedProfile, note, setNote, dayProgram, setDayProgram } = useHostHomeProfileContext();\r\n  const { serverURL, profileOwner, credits, setCredits, setUsage, usage, setLimit, limit, status } = useServerContext();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleProfileSelect = (profile) => {\r\n    setSelectedProfile(profile);\r\n  };\r\n\r\n  const handleToggleDayProgram = () => {\r\n    setDayProgram(!dayProgram); // Toggle dayProgram value\r\n  };\r\n  \r\n  const navigateToPurchase = () => {\r\n    navigation.navigate('Purchase');\r\n  };\r\n\r\n  const handleCopy = async () => {\r\n    await Clipboard.setStringAsync(note);\r\n    Alert.alert('Note Saved!', 'Your note has been saved to your clipboard!')\r\n  };\r\n\r\n  const handleFinished = () => {\r\n    setNote('');\r\n  };\r\n\r\n  const handleGenerate = async () => {\r\n\r\n    if (credits === 0 && usage === limit) {\r\n      console.error('Error: Please purchase more credits or subscribe to continue.');\r\n      return;\r\n    }\r\n\r\n    if (note) {\r\n      setNote('');\r\n    }\r\n\r\n    //Start Loading\r\n    setLoading(true);\r\n    \r\n    try {\r\n      const response = await fetch(`${serverURL}/hostHome/generate?profileOwner=${profileOwner}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          selectedProfile,\r\n          dayProgram,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data) {\r\n        setNote(data.generatedText);\r\n        setCredits(data.remainingCredits);\r\n        setUsage(data.newUsage);\r\n        setLimit(data.limit);\r\n      } else {\r\n        console.error('Error:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending selected profile to server:', error);\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const getCurrentDate = () => {\r\n    const currentDate = new Date();\r\n    const month = currentDate.getMonth() + 1; // Months are zero-based\r\n    const day = currentDate.getDate();\r\n    const year = currentDate.getFullYear();\r\n\r\n    return `${String(month).padStart(2, '0')}/${String(day).padStart(2, '0')}/${year}`;\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const formattedDate = getCurrentDate();\r\n      const filename = `${selectedProfile.profileName}_${formattedDate}.txt`;\r\n\r\n      // Create a Blob containing the text\r\n      const blob = new Blob([note], { type: 'text/plain' });\r\n\r\n      // Create a download link and trigger a click event to download the file\r\n      const link = document.createElement('a');\r\n      link.href = window.URL.createObjectURL(blob);\r\n      link.download = filename;\r\n      link.click();\r\n    } catch (error) {\r\n      console.error('Error saving file:', error);\r\n      // Handle error as needed\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View className = \"bg-white flex-1\">\r\n  \r\n        {/* Main Container */}\r\n        <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n  \r\n          {/* Background Gradient */}\r\n          <LinearGradient \r\n            className = \"h-full w-full absolute\" \r\n            colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n  \r\n            <View className = \"h-[20%]\"/>\r\n\r\n            <View className = \"h-[60%] justify-center\">\r\n\r\n              <Text className = \"text-white text-3xl text-center\">Generating Note..</Text>\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[20%] justify-center items-center\">\r\n\r\n              <Text className = \"text-white text-base text-center\">We accept 07</Text>\r\n\r\n            </View>\r\n          \r\n          </LinearGradient>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (note) {\r\n    return (\r\n      <View className = \"bg-white flex-1\">\r\n  \r\n        {/* Main Container */}\r\n        <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n  \r\n          {/* Background Gradient */}\r\n          <LinearGradient \r\n            className = \"h-full w-full absolute\" \r\n            colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n  \r\n            <View className = \"h-[10%]\"/>\r\n\r\n            <View className = \"h-[60%]\">\r\n\r\n              <View className = \"h-[80%] w-[80%] bg-white justify-center self-center p-4\">\r\n\r\n                <ScrollView>\r\n                  <Text className = \"text-black text-base text-center\">{note}</Text>\r\n                </ScrollView>\r\n\r\n              </View>\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[30%] items-center\">\r\n                \r\n              <View className = \"flex-row w-full h-[50%] justify-evenly\">\r\n                <View className = \"w-[40%] h-[50%] bg-green-500 rounded-full items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleCopy}>\r\n                    <Text className = \"text-white text-xl text-center\">Copy</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                <View className = \"w-[40%] h-[50%] bg-white border-2 border-green-500 rounded-full items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleSave}>\r\n                    <Text className = \"text-black text-xl text-center\">Save</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n              <View className = \"h-[50%] w-full justify-center items-center\">\r\n                <View className = \"w-[40%] h-[50%] bg-white border-2 border-white rounded-full\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleFinished}>\r\n                    <Text className = \"text-black text-xl text-center\">Go Back</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n            </View>\r\n          \r\n          </LinearGradient>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-[10%] justify-center\">\r\n\r\n            <Text className = \"text-center text-white\">Select a Profile:</Text>\r\n\r\n            <View className = \"w-[50%] border-2 border-sky-500 bg-white self-center\">\r\n              <Picker\r\n                selectedValue={selectedProfile ? selectedProfile.profileId.toString() : ''}\r\n                onValueChange={(itemValue) => handleProfileSelect(profiles.find(item => item.profileId.toString() === itemValue))}\r\n              >\r\n                {profiles.map((item) => (\r\n                  <Picker.Item\r\n                    key={item.profileId.toString()}\r\n                    label={item.profileName}\r\n                    value={item.profileId.toString()}\r\n                  />\r\n                ))}\r\n              </Picker>\r\n            </View>\r\n\r\n          </View>\r\n\r\n          {selectedProfile && (\r\n          <View className = \"h-[90%] w-[75%] justify-center self-center\">\r\n\r\n            <View className = \"h-[15%] space-y-1\">\r\n              <Text className = \"text-white text-xl font-bold text-center\">Goals:</Text>\r\n              <View className = \"h-[50%] w-[75%] bg-white justify-center self-center rounded-full\">\r\n                <Text className = \"text-black text-center text-base\">{selectedProfile.profileGoals}</Text>\r\n              </View>\r\n            </View>\r\n\r\n            {/* Basic Info*/}\r\n            <View className = \"h-[15%] space-y-1\">\r\n\r\n              <Text className = \"text-white text-xl font-bold text-center pt-2\">Medication Time:</Text>\r\n\r\n              <View className = \" bg-white m-4 p-2 justify-center rounded-2xl\">\r\n                <Text className = \"text-black\">-Morning: {selectedProfile.morningMedication ? 'Yes' : 'No'} </Text>\r\n                <Text className = \"text-black\">-Afternoon: {selectedProfile.afternoonMedication ? 'Yes' : 'No'} </Text>\r\n                <Text className = \"text-black\">-Night: {selectedProfile.nightMedication ? 'Yes' : 'No'} </Text>\r\n              </View>\r\n                \r\n            </View>\r\n\r\n            {/* Activities */}\r\n            <View className = \"h-[40%] space-y-1 pt-8\">\r\n\r\n              <Text className = \"text-white text-xl font-bold text-center\">Activities:</Text>\r\n\r\n              <View className = \"h-[40%] m-4 p-2 bg-white rounded-2xl\">\r\n                <ScrollView>\r\n                  {selectedProfile.activities.map((item, index) => (\r\n                    <Text key={index} className = \"text-black text-transform: capitalize\">\r\n                      -{item}\r\n                    </Text>\r\n                  ))}\r\n                </ScrollView>\r\n              </View>\r\n\r\n              <View className = \"w-[60%] h-[30%] bg-white border-2 border-white rounded-full self-center items-center\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleToggleDayProgram}>\r\n                  <Text className = \"text-black text-xl text-center\">Day Program: {dayProgram ? 'Yes' : 'No'}</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n            \r\n            {/* Footer */}\r\n            <View className = \"h-[30%]\">\r\n                \r\n              <View className = \"h-full w-full items-center space-y-4\">\r\n              \r\n                {status === 'active' ? (\r\n                  <>\r\n                    <View className=\"flex-row w-full justify-evenly\">\r\n                      <Text className=\"text-white font-bold text-xl\">Usage: {usage}/{limit}</Text>\r\n                      <Text className=\"text-white font-bold text-xl\">Credits: {credits}</Text>\r\n                    </View>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Text className=\"text-white font-bold text-xl\">Credits: {credits}</Text>\r\n                  </>\r\n                )}\r\n\r\n                <View className = \"w-[50%] h-[30%] bg-white border-2 border-white rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleGenerate}>\r\n                    <Text className = \"text-black text-xl text-center\">Generate!</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                <TouchableOpacity onPress={navigateToPurchase}>\r\n                  <Text className = \"text-white font-bold text-xl\">Buy Credits?</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n            </View>\r\n\r\n          </View>)}\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default GenerateHostHomeNotesScreen","import React, { useState } from 'react';\r\nimport { View, Text, TextInput, FlatList, TouchableOpacity, ScrollView } from 'react-native';\r\nimport { useHostHomeProfileContext } from '../../components/HostHomeProfileContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Picker } from '@react-native-picker/picker';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport Modal from 'react-native-modal';\r\n\r\nconst DeleteProfileModal = ({ isVisible, onCancel, onDelete }) => {\r\n  return (\r\n    <Modal isVisible={isVisible} transparent={false}>\r\n      <View className = \"h-[75%] w-[75%] bg-white justify-center items-center self-center space-y-8\">\r\n\r\n        <Text className = \"text-black text-center text-base\">Are you sure you want to delete your profile? This action cannot be undone.</Text>\r\n\r\n        <View className = \"h-[20%] w-[40%] border-2 border-black rounded-2xl justify-center\">\r\n          <TouchableOpacity className = \"h-full w-full justify-center\" onPress={onCancel}>\r\n            <Text className = \"text-black text-center text-base\">Cancel</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n\r\n        <View className = \"h-[20%] w-[40%] border-2 bg-red-500 border-black rounded-2xl justify-center\">\r\n          <TouchableOpacity className = \"h-full w-full justify-center\" onPress={onDelete}>\r\n            <Text className = \"text-white text-center text-base\">Delete</Text>\r\n          </TouchableOpacity>\r\n        </View>\r\n\r\n      </View>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nconst ViewHostHomeProfileScreen = () => {\r\n  const { profiles, selectedProfile, setSelectedProfile, updateProfile, deleteProfile } = useHostHomeProfileContext();\r\n  const [newActivity, setNewActivity] = useState('');\r\n  const navigation = useNavigation();\r\n  const [isModalVisible, setModalVisible] = useState(false);\r\n\r\n  const handleProfileSelect = (profile) => {\r\n    setSelectedProfile(profile);\r\n  };\r\n\r\n  const handleAddActivity = () => {\r\n    if (newActivity.trim() !== '') {\r\n      setSelectedProfile({ ...selectedProfile, activities: [...selectedProfile.activities, newActivity] });\r\n      setNewActivity('');\r\n    }\r\n  };\r\n\r\n  const handleDeleteActivity = (activity) => {\r\n    const updatedActivities = selectedProfile.activities.filter((item) => item !== activity);\r\n    setSelectedProfile({ ...selectedProfile, activities: updatedActivities });\r\n  };\r\n\r\n  const handleUpdateProfile = async () => {\r\n    try {\r\n      await updateProfile(selectedProfile);\r\n      console.log('Profile updated successfully:', selectedProfile);\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteProfile = async () => {\r\n    // Open the modal\r\n    setModalVisible(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    // Close the modal\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const handleConfirmDelete = async () => {\r\n    // Perform deletion logic\r\n    try {\r\n      await deleteProfile(selectedProfile.profileId);\r\n      // Add any additional logic after successful deletion\r\n    } catch (error) {\r\n      console.error('Error deleting profile:', error);\r\n    }\r\n\r\n    // Close the modal\r\n    setModalVisible(false);\r\n  };\r\n\r\n  const handleGenderToggle = () => {\r\n    setSelectedProfile(prevProfile => ({\r\n      ...prevProfile,\r\n      profileGender: prevProfile.profileGender === 'Male' ? 'Female' : 'Male',\r\n    }));\r\n  };  \r\n\r\n  const navigateToCreate = () => {\r\n    navigation.navigate('CreateProfile');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-[10%] space-y-2\">\r\n\r\n            <View className = \"absolute inset-x-0 bottom-0\">\r\n\r\n              <Text className = \"text-center text-white\">Select a Profile:</Text>\r\n\r\n              <View className = \"flex-row justify-center space-x-2\">\r\n                <View className = \"w-[60%] h-full border-2 border-sky-500 bg-white self-center \">\r\n                  <Picker\r\n                    selectedValue={selectedProfile ? selectedProfile.profileId.toString() : ''}\r\n                    onValueChange={(itemValue) => handleProfileSelect(profiles.find(item => item.profileId.toString() === itemValue))}\r\n                  >\r\n                    {profiles.map((item) => (\r\n                      <Picker.Item\r\n                        key={item.profileId.toString()}\r\n                        label={item.profileName}\r\n                        value={item.profileId.toString()}\r\n                      />\r\n                    ))}\r\n                  </Picker>\r\n                </View>\r\n\r\n                <View className = \"w-[20%] h-[100%] bg-white border-2 border-green-500 rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={navigateToCreate}> \r\n                    <Text className = \"text-black text-base text-center\">Add New</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n            </View>\r\n\r\n          </View>\r\n\r\n          {!selectedProfile && (\r\n            <View className = \"h-[85%] justify-center\">\r\n\r\n              <View className = \"items-center\">\r\n                <Text className = \"text-white text-2xl m-2\">Click 'Add New' to create your first profile! </Text>\r\n              </View>\r\n            </View>\r\n          )}\r\n\r\n          {selectedProfile && (\r\n          <View className = \"h-[85%]\">\r\n\r\n            <DeleteProfileModal\r\n              isVisible={isModalVisible}\r\n              onCancel={handleCancel}\r\n              onDelete={handleConfirmDelete}\r\n            />\r\n\r\n            {/* Basic Info*/}\r\n            <View className = \"h-[30%] justify-center items-center\">\r\n\r\n              <Text className = \"text-white text-base\">Name</Text>\r\n\r\n              <View className = \"w-[75%] h-[18%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Name\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileName}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileName: text })}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-base\">Gender</Text>\r\n\r\n              <View className = \"w-[75%] h-[18%] bg-white rounded-full justify-center\">\r\n                <TouchableOpacity onPress={handleGenderToggle}> \r\n                  <Text className = \"text-black text-base text-center\">{selectedProfile.profileGender}</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <Text className = \"text-white text-base\">Goals</Text>\r\n\r\n              <View className = \"w-[75%] h-[18%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Goals\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileGoals}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileGoals: text })}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n            </View>\r\n\r\n            {/* Medications */}\r\n            \r\n            <View className = \"h-[20%]\">\r\n              <Text className = \"text-white text-xl text-center\">Medication Time:</Text>\r\n\r\n              <View className = \"flex-row h-[70%] justify-evenly items-center\">\r\n                {selectedProfile.morningMedication ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, morningMedication: !selectedProfile.morningMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Morning</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, morningMedication: !selectedProfile.morningMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Morning</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n\r\n                {selectedProfile.afternoonMedication ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, afternoonMedication: !selectedProfile.afternoonMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Afternoon</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, afternoonMedication: !selectedProfile.afternoonMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Afternoon</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n\r\n                {selectedProfile.nightMedication ? (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-green-500 bg-green-500 rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, nightMedication: !selectedProfile.nightMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Night</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                ) : (\r\n                  <View className = \"w-[30%] h-[75%] border-2 border-white rounded-full justify-center items-center\">\r\n                    <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => setSelectedProfile({ ...selectedProfile, nightMedication: !selectedProfile.nightMedication })}>\r\n                      <Text className = \"text-white text-xl text-center\">Night</Text>\r\n                    </TouchableOpacity>\r\n                  </View>\r\n                )}\r\n              </View>\r\n            </View>\r\n\r\n            {/* Activities */}\r\n            <View className = \"h-[40%]\">\r\n              <View className = \"flex-row h-[20%] justify-evenly items-center my-2\">\r\n\r\n                <View className = \"w-[60%] h-[100%] bg-white rounded-full\">\r\n                  <TextInput\r\n                    className=\"h-full w-full text-black text-base text-center\"\r\n                    placeholder=\"Add Activity\"\r\n                    placeholderTextColor={'gray'}\r\n                    onChangeText={(text) => setNewActivity(text)}\r\n                    value={newActivity}\r\n                    secureTextEntry={false}\r\n                  />\r\n                </View>\r\n                <View className = \"w-[30%] h-[100%] border-2 border-white rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleAddActivity}>\r\n                    <Text className = \"text-white text-xl text-center\">Save</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n              <View className = \"h-[60%] bg-white border-2 border-white rounded-2xl py-2 m-4\">\r\n                <FlatList\r\n                  data={selectedProfile.activities}\r\n                  renderItem={({ item, index }) => (\r\n                    <ScrollView>\r\n                      <View className = \"flex-row\">\r\n\r\n                        <Text className = \"w-[75%] text-center text-black\">{item}</Text>\r\n\r\n                        <View className = \"w-[25%]\">\r\n                          <TouchableOpacity className=\"w-full h-full justify-center\" onPress={() => handleDeleteActivity(item)}>\r\n                            <Text className=\"text-red-500 text-base text-center\">X</Text>\r\n                          </TouchableOpacity>\r\n                        </View>\r\n\r\n                      </View>\r\n                    </ScrollView>\r\n                  )}\r\n                  keyExtractor={(item, index) => index.toString()}\r\n                />\r\n              </View>\r\n            </View>\r\n            \r\n            {/* Footer */}\r\n            <View className = \"h-[10%]\">\r\n              <View className = \"flex-row h-[70%] justify-evenly items-center\">\r\n\r\n                <View className = \"w-[30%] h-[75%] bg-white/20 border-2 border-white rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleUpdateProfile}>\r\n                    <Text className = \"text-white text-xl text-center\">Update</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                <View className = \"w-[30%] h-[75%] bg-red-500 border-2 border-red-500 rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleDeleteProfile}>\r\n                    <Text className = \"text-white text-xl text-center\">Delete</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n                \r\n              </View>\r\n            </View>\r\n\r\n          </View>)}\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default ViewHostHomeProfileScreen;\r\n","import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\r\nimport { useTherapistProfileContext } from '../../components/TherapistProfileContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst CreateTherapistProfileScreen = () => {\r\n  const { createProfile } = useTherapistProfileContext();\r\n  const [profileName, setProfileName] = useState('');\r\n  const [profileGender, setProfileGender] = useState('Male');\r\n  const [profileObjective, setProfileObjective] = useState('');\r\n  const [profileIntervention, setProfileIntervention] = useState('');\r\n  const [profileGoals, setProfileGoals] = useState('');\r\n  const navigation = useNavigation();\r\n\r\n  const handleProfileCreation = async () => {\r\n    if (\r\n      !profileName.trim() ||\r\n      !profileGender.trim() ||\r\n      !profileObjective.trim() ||\r\n      !profileIntervention.trim() ||\r\n      !profileGoals.trim()\r\n    ) {\r\n      console.error('All fields are required.');\r\n      return;\r\n    }\r\n  \r\n    const newProfileData = {\r\n      profileName,\r\n      profileGender,\r\n      profileObjective,\r\n      profileIntervention,\r\n      profileGoals,\r\n    };\r\n  \r\n    try {\r\n      await createProfile(newProfileData);\r\n\r\n      //Reset Fields\r\n      setProfileName('');\r\n      setProfileGender('Male');\r\n      setProfileObjective('');\r\n      setProfileIntervention('');\r\n      setProfileGoals('');\r\n  \r\n    } catch (error) {\r\n      console.log('Error creating profile:', error.message);\r\n    }\r\n  };  \r\n\r\n  const handleGenderToggle = () => {\r\n    setProfileGender(prevGender => (prevGender === 'Male' ? 'Female' : 'Male'));\r\n  };\r\n\r\n  const navigateToView = () => {\r\n    navigation.navigate('ViewProfile');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n            \r\n            {/* Title */}\r\n            <View className = \"h-[20%]\"/>\r\n\r\n            {/* Profile Info */}\r\n            <View className = \"h-[50%] justify-center items-center my-2\">\r\n\r\n              <Text className = \"text-white text-xl\">Profile Name</Text>\r\n        \r\n              <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Name\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileName(text)}\r\n                  value={profileName}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Gender</Text>\r\n\r\n              <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center my-2\">\r\n                  <TouchableOpacity onPress={handleGenderToggle}>\r\n                    <Text className = \"text-black text-base text-center\">Gender: {profileGender}</Text>\r\n                  </TouchableOpacity>\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Goals</Text>\r\n\r\n              <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Goals\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileGoals(text)}\r\n                  value={profileGoals}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Objective</Text>\r\n\r\n              <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Objective\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileObjective(text)}\r\n                  value={profileObjective}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Intervention</Text>\r\n\r\n              <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center my-2\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center self-center\"\r\n                  placeholder=\"Profile Intervention\"\r\n                  placeholderTextColor={'gray'}\r\n                  onChangeText={(text) => setProfileIntervention(text)}\r\n                  value={profileIntervention}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n            </View>\r\n\r\n            {/* Footer */}\r\n            <View className = \"h-[20%] flex-row items-center justify-evenly\">\r\n              <View className = \" h-[50%] w-[40%] bg-white/20 border-2 border-white rounded-full justify-center my-2\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleProfileCreation}>\r\n                  <Text className = \"text-white text-xl text-center\">Create</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <View className = \" h-[50%] w-[40%] bg-white rounded-full justify-center my-2\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={navigateToView}>\r\n                  <Text className = \"text-black text-xl text-center\">Go back</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default CreateTherapistProfileScreen","import React, { useState } from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, ScrollView } from 'react-native';\r\n\r\nconst DispositionContainer = ({ dispositions, selectedDisposition, toggleDisposition }) => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const filteredDispositions = dispositions.filter(disposition =>\r\n    disposition.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <TextInput\r\n        className=\"bg-white border-gray-400 border-2 max-h-[30%] w-[85%] self-center m-2 text-center\"\r\n        placeholder=\"Search\"\r\n        placeholderTextColor={'gray'}\r\n        onChangeText={setSearchTerm}\r\n        value={searchTerm}\r\n      />\r\n\r\n      <ScrollView>\r\n      {filteredDispositions.map((item, index) => (\r\n        <TouchableOpacity\r\n          key={index}\r\n          style={[\r\n            styles.dispositionButton,\r\n            selectedDisposition === item && styles.selectedDispositionButton\r\n          ]}\r\n          onPress={() => toggleDisposition(item)}\r\n        >\r\n          <Text className=\"text-black\">{item}</Text>\r\n        </TouchableOpacity>\r\n      ))}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default DispositionContainer;\r\n\r\nconst styles = {\r\n  dispositionButton: {\r\n    backgroundColor: 'white',\r\n    padding: 10,\r\n    margin: 5,\r\n  },\r\n  selectedDispositionButton: {\r\n    backgroundColor: 'lightblue',\r\n  },\r\n};\r\n","import { View, Text, ScrollView, TouchableOpacity, Alert} from 'react-native';\r\nimport React, { useState } from 'react'\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useTherapistProfileContext } from '../../components/TherapistProfileContext';\r\nimport { useServerContext } from '../../components/ServerContext';\r\nimport DispositionContainer from '../../components/DispositionContainer';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport * as Clipboard from 'expo-clipboard';\r\n\r\nconst behaviorDispositions = [\r\n  'Aggressive', 'Angry', 'Bored', 'Bright', 'Calm', 'Confused',\r\n  'Defiant', 'Depressed', 'Disgusted', 'Ecstatic', 'Enraged', 'Exhausted',\r\n  'Flat', 'Frightened', 'Frustrated', 'Happy', 'Lonely', 'Overwhelmed',\r\n  'Playful', 'Sad', 'Shy', 'Subdued', 'Suspicious', 'Talkative'\r\n];\r\n\r\nconst interventionDispositions = [\r\n  'ADHD', 'Anger', 'Anxiety', 'Communication Skills', 'Conduct disorder', 'Depression', 'Drug use', 'Emotional Spirals',\r\n  'Externalizing Behaviors', 'Family Conflicts', 'Grief/Loss Unresolved', 'Identifying Activating Events', 'Impulsivity', 'Internalizing Behaviors ',\r\n  'Low Self-Esteem ', 'Oppositional Defiant Disorder', 'Parenting', 'Positive Qualities Record', 'PTSD', 'Relationship Issues', 'Self Compassion', 'Self-Defeating Behavior',\r\n  'Self-Mutilation', 'Stress', 'Truancy',\r\n];\r\n\r\nconst GenerateTherapistNotesScreen = () => {\r\n  const navigation = useNavigation();\r\n  const { profiles, selectedProfile, setSelectedProfile, \r\n    note, \r\n    setNote, \r\n    behavior,\r\n    setBehavior,\r\n    intervention,\r\n    setIntervention,\r\n    response,\r\n    setResponse,\r\n    plan,\r\n    setPlan \r\n  } = useTherapistProfileContext();\r\n  const { serverURL, profileOwner, credits, setCredits, setUsage, usage, setLimit, limit, status} = useServerContext();\r\n  const [selectedBehaviorDispositions, setSelectedBehaviorDispositions] = useState('');\r\n  const [selectedInterventionDispositions, setSelectedInterventionDispositions] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleProfileSelect = (profile) => {\r\n    setSelectedProfile(profile);\r\n  };\r\n  \r\n  const navigateToPurchase = () => {\r\n    navigation.navigate('Purchase');\r\n  };\r\n\r\n  const toggleBehaviorDisposition = (disposition) => {\r\n    setSelectedBehaviorDispositions(disposition);\r\n  };\r\n  \r\n  const toggleInterventionDisposition = (disposition) => {\r\n    setSelectedInterventionDispositions(disposition);\r\n  };\r\n  \r\n  const handleGenerate = async () => {\r\n    if (selectedBehaviorDispositions.length === 0 || selectedInterventionDispositions.length === 0) {\r\n      console.error('Error: Please select at least one disposition.');\r\n      return;\r\n    }\r\n\r\n    if (credits === 0) {\r\n      console.error('Error: Please purchase more credits to continue.');\r\n      return;\r\n    }\r\n\r\n    //Start Loading\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(`${serverURL}/therapist/generate?profileOwner=${profileOwner}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          selectedBehaviorDispositions,\r\n          selectedInterventionDispositions\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data) {\r\n        setNote(true);\r\n        setBehavior(data.behavior);\r\n        setIntervention(data.intervention);\r\n        setResponse(data.response)\r\n        setPlan(data.plan)\r\n        setCredits(data.remainingCredits);\r\n        setUsage(data.newUsage);\r\n        setLimit(data.limit);\r\n      } else {\r\n        console.error('Error:', data.error);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error sending selected profile to server:', error);\r\n    }\r\n\r\n    setLoading(false);\r\n  };\r\n\r\n  const handleCopy = async (text) => {\r\n    await Clipboard.setStringAsync(text);\r\n    Alert.alert('Saved!', 'item has been saved');\r\n  }\r\n\r\n  const getCurrentDate = () => {\r\n    const currentDate = new Date();\r\n    const month = currentDate.getMonth() + 1; // Months are zero-based\r\n    const day = currentDate.getDate();\r\n    const year = currentDate.getFullYear();\r\n\r\n    return `${String(month).padStart(2, '0')}/${String(day).padStart(2, '0')}/${year}`;\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    try {\r\n      const formattedDate = getCurrentDate();\r\n      const filename = `${formattedDate}.txt`;\r\n      const combinedText = `Behavior\\n\\n${behavior}\\n\\nIntervention\\n\\n${intervention}\\n\\nResponse\\n\\n${response}\\n\\nPlan\\n\\n${plan}`;\r\n\r\n      // Create a Blob containing the text\r\n      const blob = new Blob([combinedText], { type: 'text/plain' });\r\n\r\n      // Create a download link and trigger a click event to download the file\r\n      const link = document.createElement('a');\r\n      link.href = window.URL.createObjectURL(blob);\r\n      link.download = filename;\r\n      link.click();\r\n    } catch (error) {\r\n      console.error('Error saving file:', error);\r\n      // Handle error as needed\r\n    }\r\n  };\r\n\r\n  const handleFinished = () => {\r\n    setSelectedBehaviorDispositions('');\r\n    setSelectedInterventionDispositions('');\r\n    setNote(false);\r\n    setBehavior('');\r\n    setIntervention('');\r\n    setResponse('');\r\n    setPlan('');\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <View className = \"bg-white flex-1\">\r\n  \r\n        {/* Main Container */}\r\n        <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n  \r\n          {/* Background Gradient */}\r\n          <LinearGradient \r\n            className = \"h-full w-full absolute\" \r\n            colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n  \r\n            <View className = \"h-[20%]\"/>\r\n\r\n            <View className = \"h-[60%] justify-center\">\r\n\r\n              <Text className = \"text-white text-3xl text-center\">Generating Note..</Text>\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[20%] justify-center items-center\">\r\n\r\n              <Text className = \"text-white text-base text-center\">We accept 07</Text>\r\n\r\n            </View>\r\n          \r\n          </LinearGradient>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  if (note) {\r\n    return (\r\n      <View className = \"bg-white flex-1\">\r\n  \r\n        {/* Main Container */}\r\n        <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n  \r\n          {/* Background Gradient */}\r\n          <LinearGradient \r\n            className = \"h-full w-full absolute\" \r\n            colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n  \r\n            <View className = \"h-[10%]\"/>\r\n\r\n            <View className = \"h-[60%]\">\r\n\r\n              <View className = \"h-[80%] w-[80%] bg-white justify-center self-center p-4\">\r\n\r\n                <ScrollView>\r\n                  <View className = \"w-full h-full justify-center items-center my-2 space-y-4\">\r\n\r\n                    <View className = \"flex-row space-x-8 justify-center\">\r\n\r\n                      <Text className = \"text-black text-xl text-center font-bold underline\">Behavior</Text>\r\n\r\n                      <View className = \"w-[50%] h-[100%] bg-white border-2 border-black rounded-full\">\r\n                        <TouchableOpacity className=\"w-full h-full justify-center\" onPress={() => handleCopy(behavior)}>\r\n                          <Text className = \"text-black text-base text-center\">Copy</Text>\r\n                        </TouchableOpacity>\r\n                      </View>\r\n\r\n                    </View>\r\n\r\n                    <Text className = \"text-black text-xl text-center\">{behavior}</Text>\r\n\r\n                    <View className = \"flex-row space-x-8 justify-center\">\r\n\r\n                      <Text className = \"text-black text-xl text-center font-bold underline\">Intervention</Text>\r\n\r\n                      <View className = \"w-[50%] h-[100%] bg-white border-2 border-black rounded-full\">\r\n                        <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handleCopy(intervention)}>\r\n                          <Text className = \"text-black text-base text-center\">Copy</Text>\r\n                        </TouchableOpacity>\r\n                      </View>\r\n\r\n                    </View>\r\n\r\n                    <Text className = \"text-black text-xl text-center\">{intervention}</Text>\r\n\r\n                    <View className = \"flex-row space-x-8 justify-center\">\r\n\r\n                      <Text className = \"text-black text-xl text-center font-bold underline\">Response</Text>\r\n\r\n                      <View className = \"w-[50%] h-[100%] bg-white border-2 border-black rounded-full\">\r\n                        <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handleCopy(response)}>\r\n                          <Text className = \"text-black text-base text-center\">Copy</Text>\r\n                        </TouchableOpacity>\r\n                      </View>\r\n\r\n                    </View>\r\n\r\n                    <Text className = \"text-black text-xl text-center\">{response}</Text>\r\n\r\n                    <View className = \"flex-row space-x-8 justify-center\">\r\n\r\n                      <Text className = \"text-black text-xl text-center font-bold underline\">Plan</Text>\r\n\r\n                      <View className = \"w-[50%] h-[100%] bg-white border-2 border-black rounded-full\">\r\n                        <TouchableOpacity className = \"w-full h-full justify-center\" onPress={() => handleCopy(plan)}>\r\n                          <Text className = \"text-black text-base text-center\">Copy</Text>\r\n                        </TouchableOpacity>\r\n                      </View>\r\n\r\n                    </View>\r\n\r\n                    <Text className = \"text-black text-xl text-center\">{plan}</Text>\r\n\r\n                  </View>\r\n                </ScrollView>\r\n\r\n              </View>\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[30%] items-center\">\r\n                \r\n              <View className = \"flex-row w-full h-[50%] justify-evenly\">\r\n                <View className = \"w-[40%] h-[50%] bg-green-500 rounded-full items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleSave}>\r\n                    <Text className = \"text-white text-xl text-center\">Save</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                <View className = \"w-[40%] h-[50%] bg-white border-2 border-green-500 rounded-full items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleGenerate}>\r\n                    <Text className = \"text-black text-xl text-center\">New</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n              <View className = \"h-[50%] w-full justify-center items-center\">\r\n                <View className = \"w-[40%] h-[50%] bg-white border-2 border-white rounded-full\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleFinished}>\r\n                    <Text className = \"text-black text-xl text-center\">Go Back</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n\r\n            </View>\r\n          \r\n          </LinearGradient>\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-[100%]\">\r\n\r\n            <View className = \"h-[5%]\"/>\r\n\r\n            <Text className = \"text-white text-xl text-center\">Behavior</Text>\r\n\r\n            <View className = \"h-[25%] w-[50%] space-y-1 self-center\">\r\n\r\n              <DispositionContainer\r\n                dispositions={behaviorDispositions}\r\n                selectedDisposition={selectedBehaviorDispositions}\r\n                toggleDisposition={toggleBehaviorDisposition}\r\n              />\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[5%]\"/>\r\n\r\n            <Text className = \"text-white text-xl text-center\">Intervention</Text>\r\n\r\n            <View className = \"h-[25%] w-[50%] space-y-1 self-center\">\r\n\r\n              <DispositionContainer\r\n                dispositions={interventionDispositions}\r\n                selectedDisposition={selectedInterventionDispositions}\r\n                toggleDisposition={toggleInterventionDisposition}\r\n              />\r\n\r\n            </View>\r\n            \r\n            {/* Footer */}\r\n            <View className = \"h-[30%]\">\r\n                \r\n              <View className = \"h-full w-full justify-center items-center space-y-4\">\r\n\r\n                {status === 'active' ? (\r\n                  <>\r\n                    <View className=\"flex-row w-full justify-evenly\">\r\n                      <Text className=\"text-white font-bold text-xl\">Usage: {usage}/{limit}</Text>\r\n                      <Text className=\"text-white font-bold text-xl\">Credits: {credits}</Text>\r\n                    </View>\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Text className=\"text-white font-bold text-xl\">Credits: {credits}</Text>\r\n                  </>\r\n                )}\r\n\r\n                <View className = \"w-[50%] h-[30%] bg-white border-2 border-white rounded-full justify-center items-center\">\r\n                  <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleGenerate}>\r\n                    <Text className = \"text-black text-xl text-center\">Generate!</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n\r\n                <TouchableOpacity onPress={navigateToPurchase}>\r\n                  <Text className = \"text-white font-bold text-xl\">Buy Credits?</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n            </View>\r\n\r\n          </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default GenerateTherapistNotesScreen","import React from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity } from 'react-native';\r\nimport { useTherapistProfileContext } from '../../components/TherapistProfileContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\nimport { Picker } from '@react-native-picker/picker';\r\nimport { useNavigation } from '@react-navigation/native';\r\n\r\nconst ViewTherapistProfileScreen = () => {\r\n  const { profiles, selectedProfile, setSelectedProfile, updateProfile, deleteProfile } = useTherapistProfileContext();\r\n  const navigation = useNavigation();\r\n\r\n  const handleProfileSelect = (profile) => {\r\n    setSelectedProfile(profile);\r\n  };\r\n\r\n  const handleUpdateProfile = async () => {\r\n    try {\r\n      const updatedProfile = { ...selectedProfile};\r\n      await updateProfile(updatedProfile);\r\n      console.log(updatedProfile)\r\n    } catch (error) {\r\n      console.error('Error updating profile:', error);\r\n    }\r\n  };\r\n\r\n  const handleDeleteProfile = async () => {\r\n    try {\r\n      await deleteProfile(selectedProfile.profileId);\r\n    } catch (error) {\r\n      console.error('Error deleting profile:', error);\r\n    }\r\n  };\r\n\r\n  const handleGenderToggle = () => {\r\n    setSelectedProfile(prevProfile => ({\r\n      ...prevProfile,\r\n      profileGender: prevProfile.profileGender === 'Male' ? 'Female' : 'Male',\r\n    }));\r\n  };  \r\n\r\n  const navigateToCreate = () => {\r\n    navigation.navigate('CreateProfile');\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-[30%] justify-center\">\r\n\r\n          <Text className = \"text-center text-white\">Select a Profile:</Text>\r\n\r\n            <View className = \"flex-row h-[20%] justify-center space-x-2\">\r\n              <View className = \"w-[60%] h-full border-2 border-sky-500 bg-white self-center justify-center\">\r\n                <Picker\r\n                  selectedValue={selectedProfile ? selectedProfile.profileId.toString() : ''}\r\n                  onValueChange={(itemValue) => handleProfileSelect(profiles.find(item => item.profileId.toString() === itemValue))}\r\n                >\r\n                  {profiles.map((item) => (\r\n                    <Picker.Item\r\n                      key={item.profileId.toString()}\r\n                      label={item.profileName}\r\n                      value={item.profileId.toString()}\r\n                    />\r\n                  ))}\r\n                </Picker>\r\n              </View>\r\n\r\n              <View className = \"w-[20%] h-[100%] bg-white border-2 border-green-500 rounded-full justify-center\">\r\n                <TouchableOpacity onPress={navigateToCreate}> \r\n                  <Text className = \"text-black text-base text-center\">Add New</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n\r\n          </View>\r\n\r\n          {selectedProfile && (\r\n          <View className = \"h-[70%]\">\r\n\r\n            {/* Profile Info */}\r\n            <View className = \"h-[60%] justify-center items-center\">\r\n\r\n              <Text className = \"text-white text-xl\">Profile Name</Text>\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center\"\r\n                  placeholder=\"Profile Name\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileName}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileName: text })}\r\n                  secureTextEntry={false}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Gender</Text>\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={handleGenderToggle}> \r\n                    <Text className = \"text-black text-base text-center\">Gender: {selectedProfile.profileGender}</Text>\r\n                  </TouchableOpacity>\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Goals</Text>\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center\"\r\n                  placeholder=\"Profile Goals\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileGoals}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileGoals: text })}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Objective</Text>\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full w-full text-black text-base text-center\"\r\n                  placeholder=\"Profile Objective\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileObjective}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileObjective: text })}\r\n                />\r\n              </View>\r\n\r\n              <Text className = \"text-white text-xl\">Profile Intervention</Text>\r\n\r\n              <View className = \"w-[75%] h-[15%] bg-white rounded-full justify-center\">\r\n                <TextInput\r\n                  className=\"h-full text-black text-base text-center\"\r\n                  placeholder=\"Profile Intervention\"\r\n                  placeholderTextColor={'gray'}\r\n                  value={selectedProfile.profileIntervention}\r\n                  onChangeText={(text) => setSelectedProfile({ ...selectedProfile, profileIntervention: text })}\r\n                />\r\n              </View>\r\n\r\n            </View>\r\n\r\n            {/* Footer */}\r\n\r\n            <View className = \"flex-row h-[40%] justify-center items-center space-x-4\">\r\n\r\n              <View className = \"w-[40%] h-[30%] bg-white/20 border-2 border-white rounded-full justify-center items-center\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleUpdateProfile}>\r\n                  <Text className = \"text-white text-xl text-center\">Update</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              <View className = \"w-[40%] h-[30%] bg-white border-2 border-white rounded-full justify-center items-center\">\r\n                <TouchableOpacity className = \"w-full h-full justify-center\" onPress={handleDeleteProfile}>\r\n                  <Text className = \"text-black text-xl text-center\">Delete</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n              </View>\r\n\r\n          </View>)}\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nexport default ViewTherapistProfileScreen","import React from 'react';\r\nimport { View, Text, TouchableOpacity } from 'react-native';\r\nimport { signOut } from 'firebase/auth';\r\nimport { FIREBASE_AUTH } from '../../components/FirebaseConfig';\r\nimport { useServerContext } from '../../components/ServerContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nconst SettingsScreen = () => {\r\n  const { accountType, changeAccountType, profileOwner, formattedBillingCycleEnd,\r\n    status,\r\n    usage,\r\n    limit,\r\n    tier, } = useServerContext();\r\n\r\n  const handleSignOut = async () => {\r\n    try {\r\n      const auth = FIREBASE_AUTH;\r\n      await signOut(auth);\r\n    } catch (error) {\r\n      console.error('Error signing out:', error);\r\n    }\r\n  };\r\n\r\n  const handleAccountTypeChange = (newAccountType) => {\r\n    changeAccountType(profileOwner, newAccountType);\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"h-full w-full justify-center items-center space-y-4\">\r\n\r\n            <View className = \"h-[20%] w-[80%]\">\r\n\r\n              {status === 'active' && (\r\n                <>\r\n                  <View className = \"bg-white h-full w-full justify-evenly items-center rounded-2xl\">\r\n                  <Text className = \"text-black text-xl\">Subscription Tier: ({tier})</Text>\r\n                  <Text className = \"text-black text-xl\">Status: {status}</Text>\r\n                  <Text className = \"text-black text-xl\">Usage: {usage} / Limit: {limit}</Text>\r\n                  <Text className = \"text-black text-xl\">End Date: {formattedBillingCycleEnd} </Text>\r\n                  </View>\r\n                </>\r\n              )}\r\n\r\n            </View>\r\n\r\n            <View className = \"h-[40%] w-full justify-center items-center space-y-2\">\r\n\r\n              <Text className = \"text-white text-xl text-center\">Account Type:</Text>\r\n\r\n              {accountType == 'Host Home' ? (\r\n                <View className = \"w-[75%] h-[10%] bg-white border-2 border-green-500 rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={() => handleAccountTypeChange('Host Home')}> \r\n                    <Text className = \"text-black text-base text-center\">Host Home</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              ) : (\r\n                <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={() => handleAccountTypeChange('Host Home')}> \r\n                    <Text className = \"text-black text-base text-center\">Host Home</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              )}\r\n\r\n              {accountType == 'Therapist' ? (\r\n                <View className = \"w-[75%] h-[10%] bg-white border-2 border-green-500 rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={() => handleAccountTypeChange('Therapist')}> \r\n                    <Text className = \"text-black text-base text-center\">Therapist</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              ) : (\r\n                <View className = \"w-[75%] h-[10%] bg-white rounded-full justify-center\">\r\n                  <TouchableOpacity onPress={() => handleAccountTypeChange('Therapist')}> \r\n                    <Text className = \"text-black text-base text-center\">Therapist</Text>\r\n                  </TouchableOpacity>\r\n                </View>\r\n              )}\r\n\r\n              \r\n\r\n            </View>\r\n\r\n            <View className = \"h-[20%] w-full items-center\">\r\n            <Text className = \"text-white text-xl text-center\">Contact Us:</Text>\r\n              <Text className = \"text-white text-xl text-center\">Email: easyetchsupport@gmail.com</Text>\r\n              <Text className = \"text-white text-xl text-center pb-4\">Phone: (404) 518-9797</Text>\r\n              <View className = \"w-[75%] h-[50%] bg-white rounded-full justify-center\">\r\n                <TouchableOpacity onPress={handleSignOut}> \r\n                  <Text className = \"text-black text-base text-center\">Sign Out</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n            </View>\r\n\r\n          </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default SettingsScreen;\r\n","import React, {useState} from 'react';\r\nimport { View, Text, TouchableOpacity, TextInput} from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { useServerContext } from '../../components/ServerContext';\r\nimport { useServerURL } from '../../components/ServerURLContext';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nconst PurchaseScreen = () => {\r\n  const { accountType, status, tier } = useServerContext();\r\n  const navigation = useNavigation();\r\n  const serverURL = useServerURL();\r\n  const [quantity, setQuantity] = useState('');\r\n  const [price, setPrice] = useState(0);\r\n\r\n  const handlePurchase = async (productTitle) => {\r\n    try {\r\n\r\n      if (productTitle === 'Credits1' && quantity === 0) {\r\n        return;\r\n      }\r\n\r\n      const response = await fetch(`${serverURL}/common/checkout`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ \r\n          quantity: quantity,\r\n          productTitle: productTitle,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (data.url) {\r\n        navigation.navigate('StripeCheckout', { checkoutUrl: data.url });\r\n      } else {\r\n        console.log('Unable to connect to stripe.')\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during checkout:', error);\r\n    }\r\n  };\r\n\r\n  const navigateToGenerate = async () => {\r\n    navigation.goBack();\r\n  };  \r\n\r\n  const handleInputChange = (text) => {\r\n    if (/^\\d+$/.test(text)) {\r\n      setQuantity(text);\r\n      calculatePrice(text);\r\n    } else {\r\n      setQuantity('');\r\n      setPrice(0);\r\n    }\r\n  };\r\n\r\n  const calculatePrice = (text) => {\r\n    const parsedQuantity = parseInt(text, 10);\r\n    const calculatedPrice = parsedQuantity * 2.99;\r\n    setPrice(calculatedPrice);\r\n  };\r\n\r\n  return (\r\n    <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n          <View className = \"w-full h-full justify-center items-center space-y-2\">\r\n\r\n            {/* Header */}\r\n            <View className = \"h-[10%]\"/>\r\n\r\n            {/*Sub Info*/}\r\n            <View className = \"h-[40%] w-[80%]\">\r\n\r\n              <View className=\"w-full h-full\">\r\n\r\n                <Text className = \"text-white text-2xl font-bold text-center\">Subscriptions (30 days)</Text>\r\n\r\n                {/* Therapist */}\r\n                {accountType === \"Therapist\" && (\r\n\r\n                  <View className = \"w-full h-full justify-evenly\">\r\n\r\n                    {status === 'active' && tier === 1 ? (\r\n                      <>\r\n                        <View className = \"flex-row justify-center items-center w-full h-[20%] border-2 border-black bg-white rounded-lg\"> \r\n                            <Text className = \"w-[20%] text-black text-base text-center\">Tier 1</Text>\r\n                            <Text className = \"w-[60%] text-black text-base text-center\">Note Limit: 120</Text>\r\n                            <Text className = \"w-[20%] text-black text-base text-center\">Owned</Text>\r\n                        </View>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <TouchableOpacity className = \"w-full h-[20%]\" onPress={() => handlePurchase('T-Tier-1')}>\r\n                          <View className = \"flex-row justify-center items-center w-full h-full border-2 border-black bg-white rounded-lg\"> \r\n                            <Text className = \"w-[20%] text-black text-base text-center\">Tier 1</Text>\r\n                            <Text className = \"w-[60%] text-black text-base text-center\">Note Limit: 120</Text>\r\n                            <Text className = \"w-[20%] text-black text-base text-center\">$100</Text>\r\n                          </View>\r\n                        </TouchableOpacity>\r\n                      </>\r\n                    )}\r\n\r\n                    {/* {status === 'active' && tier === 2 ? (\r\n                      <>\r\n                        <View className = \"flex-row justify-center items-center w-full h-[20%] border-2 border-black bg-white rounded-lg\"> \r\n                            <Text className = \"w-[20%] text-black text-base text-center\">Tier 2</Text>\r\n                            <Text className = \"w-[60%] text-black text-base text-center\">Note Limit: 100</Text>\r\n                            <Text className = \"w-[20%] text-black text-base text-center\">Owned</Text>\r\n                        </View>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <TouchableOpacity className = \"w-full h-[20%]\" onPress={() => handlePurchase('T-Tier-1')}>\r\n                          <View className = \"flex-row justify-center items-center w-full h-full border-2 border-black bg-white rounded-lg\"> \r\n                            <Text className = \"w-[20%] text-black text-base text-center\">Tier 2</Text>\r\n                            <Text className = \"w-[60%] text-black text-base text-center\">Note Limit: 100</Text>\r\n                            <Text className = \"w-[20%] text-black text-base text-center\">$200</Text>\r\n                          </View>\r\n                        </TouchableOpacity>\r\n                      </>\r\n                    )}\r\n\r\n                    {status === 'active' && tier === 3 ? (\r\n                      <>\r\n                        <View className = \"flex-row justify-center items-center w-full h-[20%] border-2 border-black bg-white rounded-lg\"> \r\n                            <Text className = \"w-[20%] text-black text-base text-center\">Tier 3</Text>\r\n                            <Text className = \"w-[60%] text-black text-base text-center\">Note Limit: 150</Text>\r\n                            <Text className = \"w-[20%] text-black text-base text-center\">Owned</Text>\r\n                        </View>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <TouchableOpacity className = \"w-full h-[20%]\" onPress={() => handlePurchase('T-Tier-1')}>\r\n                          <View className = \"flex-row justify-center items-center w-full h-full border-2 border-black bg-white rounded-lg\"> \r\n                            <Text className = \"w-[20%] text-black text-base text-center\">Tier 3</Text>\r\n                            <Text className = \"w-[60%] text-black text-base text-center\">Note Limit: 150</Text>\r\n                            <Text className = \"w-[20%] text-black text-base text-center\">$300</Text>\r\n                          </View>\r\n                        </TouchableOpacity>\r\n                      </>\r\n                    )} */}\r\n\r\n                  </View>\r\n                )}\r\n\r\n                {/* Host Homes */}\r\n                {accountType === \"Host Home\" && (\r\n\r\n                  <View className = \"w-full h-full justify-evenly\">\r\n\r\n                    {status === 'active' && tier === 1 ? (\r\n                      <>\r\n                        <View className = \"flex-row justify-center items-center w-full h-[20%] border-2 border-black bg-white rounded-lg\"> \r\n                          <Text className = \"w-[20%] text-black text-base text-center\">Tier 1</Text>\r\n                          <Text className = \"w-[60%] text-black text-base text-center\">Note Limit: 31</Text>\r\n                          <Text className = \"w-[20%] text-black text-base text-center\">Owned</Text>\r\n                        </View>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <TouchableOpacity className = \"w-full h-[20%]\" onPress={() => handlePurchase('HH-Tier-1')}>\r\n                          <View className = \"flex-row justify-center items-center w-full h-full border-2 border-black bg-white rounded-lg\"> \r\n                            <Text className = \"w-[20%] text-black text-base text-center\">Tier 1</Text>\r\n                            <Text className = \"w-[60%] text-black text-base text-center\">Note Limit: 31</Text>\r\n                            <Text className = \"w-[20%] text-black text-base text-center\">$25</Text>\r\n                          </View>\r\n                        </TouchableOpacity>\r\n                      </>\r\n                    )}\r\n\r\n                    {status === 'active' && tier === 2 ? (\r\n                      <>\r\n                        <View className = \"flex-row justify-center items-center w-full h-[20%] border-2 border-black bg-white rounded-lg\"> \r\n                          <Text className = \"w-[20%] text-black text-base text-center\">Tier 2</Text>\r\n                          <Text className = \"w-[60%] text-black text-base text-center\">Note Limit: 62</Text>\r\n                          <Text className = \"w-[20%] text-black text-base text-center\">Owned</Text>\r\n                        </View>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <TouchableOpacity className = \"w-full h-[20%]\" onPress={() => handlePurchase('HH-Tier-2')}>\r\n                          <View className = \"flex-row justify-center items-center w-full h-full border-2 border-black bg-white rounded-lg\"> \r\n                            <Text className = \"w-[20%] text-black text-base text-center\">Tier 2</Text>\r\n                            <Text className = \"w-[60%] text-black text-base text-center\">Note Limit: 62</Text>\r\n                            <Text className = \"w-[20%] text-black text-base text-center\">$50</Text>\r\n                          </View>\r\n                        </TouchableOpacity>\r\n                      </>\r\n                    )}\r\n\r\n                  </View>\r\n                  )}\r\n                </View>\r\n              \r\n            </View>\r\n\r\n            <View className = \"h-[10%]\"/>\r\n\r\n            <Text className = \"text-white text-2xl font-bold text-center\">1 Credit = 1 Note</Text>\r\n            <Text className = \"text-white text-2xl font-bold text-center\">$2.99</Text>\r\n\r\n            {/* Credits */}\r\n            <View className = \"h-[40%] w-full items-center\">\r\n\r\n              <View className = \"w-[75%] h-[50%]\">\r\n\r\n                <View className = \"flex-row w-full h-[50%] justify-center items-center bg-white border-black border-2\">\r\n\r\n                  <Text className = \"w-[30%] text-black text-base text-center\">Buy Credits?</Text>\r\n\r\n                  <TextInput className = \"w-[40%] h-full border-2 border-black/10 text-center\"\r\n                    keyboardType=\"numeric\"\r\n                    placeholder=\"Enter Amount\"\r\n                    value={quantity}\r\n                    onChangeText={handleInputChange}\r\n                  />\r\n\r\n                  <TouchableOpacity className = \"w-[30%] h-full justify-center items-center\" onPress={() => handlePurchase('Credits1')}>\r\n                    <View className = \"w-[75%] h-[80%] justify-center items-center rounded-2xl bg-green-200\"> \r\n                      <Text className = \"text-black text-base text-center\">${price.toFixed(2)}</Text>\r\n                    </View>\r\n                  </TouchableOpacity>\r\n                  \r\n                </View>\r\n                \r\n              </View>\r\n\r\n              <View className = \"w-[40%] h-[20%] bg-white rounded-full justify-center items-center\">\r\n                <TouchableOpacity className = \"justify-center\" onPress={navigateToGenerate}>\r\n                    <Text className = \" text-black text-base text-center\">Go Back</Text>\r\n                </TouchableOpacity>\r\n              </View>\r\n\r\n            </View>\r\n\r\n          </View>\r\n\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default PurchaseScreen;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { View, Text } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport * as WebBrowser from 'expo-web-browser';\r\n\r\nconst StripeCheckoutScreen = ({ route }) => {\r\n  const { checkoutUrl } = route.params;\r\n  const [result, setResult] = useState(null);\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    const openBrowserAsync = async () => {\r\n      try {\r\n        let result = await WebBrowser.openBrowserAsync(checkoutUrl);\r\n        setResult(result);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n    openBrowserAsync();\r\n    navigation.navigate('Purchase');\r\n  }, [checkoutUrl]); \r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <Text>{result && JSON.stringify(result)}</Text>\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default StripeCheckoutScreen;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Text, View, Image } from 'react-native';\r\nimport { useServerContext } from '../components/ServerContext';\r\nimport { HostHomeProfileProvider } from '../components/HostHomeProfileContext'\r\nimport { TherapistProfileProvider } from '../components/TherapistProfileContext'\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\r\nimport CreateHostHomeProfileScreen from './HostHomeScreens/CreateHostHomeProfileScreen'\r\nimport GenerateHostHomeNotesScreen from './HostHomeScreens/GenerateHostHomeNotesScreen'\r\nimport ViewHostHomeProfileScreen from './HostHomeScreens/ViewHostHomeProfileScreen'\r\nimport CreateTherapistProfileScreen from './TherapistScreens/CreateTherapistProfileScreen'\r\nimport GenerateTherapistNotesScreen from './TherapistScreens/GenerateTherapistNotesScreen'\r\nimport ViewTherapistProfileScreen from './TherapistScreens/ViewTherapistProfileScreen'\r\nimport SettingsScreen from './CommonScreens/SettingsScreen';\r\nimport PurchaseScreen from './CommonScreens/PurchaseScreen'\r\nimport StripeCheckoutScreen from './CommonScreens/StripeCheckoutScreen'\r\nimport { widthPercentageToDP as wp } from 'react-native-responsive-screen';\r\nimport { LinearGradient } from 'expo-linear-gradient';\r\n\r\nconst MainNavigator = () => {\r\n  const { accountType, profileOwner } = useServerContext();\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (accountType !== null) {\r\n      setLoading(false);\r\n    }\r\n  }, [accountType]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <View className = \"bg-white flex-1\">\r\n\r\n      {/* Main Container */}\r\n      <View className = \"h-[100%] w-[100%] max-w-[1080] self-center\">\r\n\r\n        {/* Background Gradient */}\r\n        <LinearGradient \r\n          className = \"h-full w-full absolute\" \r\n          colors={['#88daf7', '#66c4ff', '#008bff']}>\r\n\r\n            <View className = \"h-full w-full justify-center\">\r\n            <Text className = \"text-white text-3xl text-center\">Loading.. Please wait</Text>\r\n            </View>\r\n        </LinearGradient>\r\n      </View>\r\n    </View>\r\n    );\r\n  }\r\n\r\n  const Stack = createNativeStackNavigator();\r\n  const Tab = createBottomTabNavigator();\r\n\r\n  const HostHomeStack = () => {\r\n    return (\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        <Stack.Screen name=\"CreateHostHome\" component={GenerateHostHomeNotesScreen}/>\r\n        <Stack.Screen name=\"Purchase\" component={PurchaseScreen}/>\r\n        <Stack.Screen name=\"StripeCheckout\" component={StripeCheckoutScreen}/>\r\n      </Stack.Navigator>\r\n     );\r\n  };\r\n\r\n  const TherapistStack = () => {\r\n    return (\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        <Stack.Screen name=\"CreateTherapist\" component={GenerateTherapistNotesScreen}/>\r\n        <Stack.Screen name=\"Purchase\" component={PurchaseScreen}/>\r\n        <Stack.Screen name=\"StripeCheckout\" component={StripeCheckoutScreen}/>\r\n      </Stack.Navigator>\r\n     );\r\n  };\r\n\r\n  const HostHomeProfileStack = () => {\r\n    return (\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        <Stack.Screen name=\"ViewProfile\" component={ViewHostHomeProfileScreen}/>\r\n        <Stack.Screen name=\"CreateProfile\" component={CreateHostHomeProfileScreen}/>\r\n      </Stack.Navigator>\r\n     );\r\n  };\r\n\r\n  const TherapistProfileStack = () => {\r\n    return (\r\n      <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n        <Stack.Screen name=\"ViewProfile\" component={ViewTherapistProfileScreen}/>\r\n        <Stack.Screen name=\"CreateProfile\" component={CreateTherapistProfileScreen}/>\r\n      </Stack.Navigator>\r\n     );\r\n  };\r\n\r\n  if (accountType === 'Host Home') {\r\n\r\n    return (\r\n      <HostHomeProfileProvider profileOwner={profileOwner}>\r\n        <Tab.Navigator \r\n          initialRouteName=\"Profiles\"\r\n          screenOptions={{\r\n            headerShown: false,\r\n            tabBarStyle: {\r\n              backgroundColor: 'white',\r\n              borderColor: 'black',\r\n              width: wp(100),\r\n              maxWidth: 1080,\r\n              alignSelf: 'center',\r\n          },\r\n          tabBarIconStyle: {\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n          },\r\n            \r\n          }}>\r\n          <Tab.Screen \r\n            name=\"Generate\" \r\n            component={HostHomeStack} \r\n            options={{\r\n              tabBarIcon: ({ color, size }) => (\r\n                <Image\r\n                  source={require('../../assets/navicons/edit.png')}\r\n                  style={{ width: size, height: size, tintColor: color }}\r\n                />\r\n              ),\r\n            }}/>\r\n          <Tab.Screen \r\n            name=\"Profiles\" \r\n            component={HostHomeProfileStack} \r\n            options={{\r\n              tabBarIcon: ({ color, size }) => (\r\n                <Image\r\n                  source={require('../../assets/navicons/user.png')}\r\n                  style={{ width: size, height: size, tintColor: color }}\r\n                />\r\n              ),\r\n            }}\r\n          />\r\n          <Tab.Screen \r\n            name=\"Settings\" \r\n            component={SettingsScreen}\r\n            options={{\r\n              tabBarIcon: ({ color, size }) => (\r\n                <Image\r\n                  source={require('../../assets/navicons/settings.png')}\r\n                  style={{ width: size, height: size, tintColor: color }}\r\n                />\r\n              ),\r\n            }}/>\r\n        </Tab.Navigator>\r\n      </HostHomeProfileProvider>\r\n    );\r\n\r\n  } else if (accountType === 'Therapist') {\r\n\r\n    return (\r\n      <TherapistProfileProvider profileOwner={profileOwner}>\r\n        <Tab.Navigator \r\n          initialRouteName=\"Generate\"\r\n          screenOptions={{\r\n            headerShown: false,\r\n            tabBarStyle: {\r\n              backgroundColor: 'white',\r\n              borderColor: 'black',\r\n              width: wp(100),\r\n              maxWidth: 1080,\r\n              alignSelf: 'center',\r\n          },\r\n          tabBarIconStyle: {\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n          },\r\n            \r\n          }}>\r\n            <Tab.Screen \r\n              name=\"Generate\" \r\n              component={TherapistStack} \r\n              options={{\r\n                tabBarIcon: ({ color, size }) => (\r\n                  <Image\r\n                    source={require('../../assets/navicons/edit.png')}\r\n                    style={{ width: size, height: size, tintColor: color }}\r\n                  />\r\n                ),\r\n              }}/>\r\n            {/* <Tab.Screen \r\n              name=\"Profiles\" \r\n              component={TherapistProfileStack} \r\n              options={{\r\n                tabBarIcon: ({ color, size }) => (\r\n                  <Image\r\n                    source={require('../../assets/navicons/user.png')}\r\n                    style={{ width: size, height: size, tintColor: color }}\r\n                  />\r\n                ),\r\n              }}/> */}\r\n            <Tab.Screen \r\n              name=\"Settings\" \r\n              component={SettingsScreen} \r\n              options={{\r\n                tabBarIcon: ({ color, size }) => (\r\n                  <Image\r\n                    source={require('../../assets/navicons/settings.png')}\r\n                    style={{ width: size, height: size, tintColor: color }}\r\n                  />\r\n                ),\r\n              }}/>\r\n        </Tab.Navigator>\r\n      </TherapistProfileProvider>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default MainNavigator;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { onAuthStateChanged } from 'firebase/auth';\r\nimport { FIREBASE_AUTH } from '../components/FirebaseConfig';\r\nimport { ServerURLProvider } from '../components/ServerURLContext';\r\nimport { ServerProvider } from '../components/ServerContext';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\r\nimport SignInScreen from './AuthScreens/SignInScreen';\r\nimport SignUpScreen from './AuthScreens/SignUpScreen';\r\nimport ForgotPasswordScreen from './AuthScreens/ForgotPasswordScreen';\r\nimport MainNavigator from './MainNavigator';\r\n\r\nconst Stack = createNativeStackNavigator();\r\n\r\nconst RootNavigator = () => {\r\n  \r\n  const serverURL = 'https://easyetch.onrender.com';\r\n\r\n  // Production: 'https://easyetch.onrender.com';\r\n  // Testing: 'http://10.0.0.70:5000'\r\n\r\n  const [profileOwner, setProfileOwner] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(FIREBASE_AUTH, async (user) => {\r\n      if (user && user.emailVerified) {\r\n        setProfileOwner(user.email);\r\n      } else {\r\n        setProfileOwner(null);\r\n      }\r\n    });\r\n\r\n    return () => unsubscribe();\r\n  }, []);\r\n\r\n  return (\r\n    <ServerURLProvider serverURL={serverURL}> \r\n      <NavigationContainer>\r\n        {profileOwner ? (\r\n        <ServerProvider profileOwner={profileOwner}>\r\n          <MainNavigator />\r\n        </ServerProvider>\r\n        ) : (\r\n          <Stack.Navigator screenOptions={{ headerShown: false }}>\r\n            <Stack.Screen name=\"SignIn\" component={SignInScreen} />\r\n            <Stack.Screen name=\"SignUp\" component={SignUpScreen} />\r\n            <Stack.Screen name=\"ForgotPassword\" component={ForgotPasswordScreen} />\r\n          </Stack.Navigator>\r\n        )}\r\n      </NavigationContainer>\r\n    </ServerURLProvider>\r\n  );\r\n};\r\n\r\nexport default RootNavigator;\r\n","import { NativeWindStyleSheet } from \"nativewind\";\r\nimport RootNavigator from \"./src/screens/RootNavigator\";\r\n\r\nNativeWindStyleSheet.setOutput({\r\n  default: \"native\",\r\n});\r\n\r\nexport default function App() {\r\n  return (\r\n    <RootNavigator />\r\n  );\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [40], () => (__webpack_require__(5530)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["FIREBASE_APP","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","FIREBASE_AUTH","getAuth","ServerURLContext","createContext","useServerURL","useContext","ServerURLProvider","_ref","children","serverURL","_jsx","Provider","value","ServerContext","useServerContext","ServerProvider","profileOwner","_useState","useState","_useState2","_slicedToArray","credits","setCredits","_useState3","_useState4","accountType","setAccountType","_useState5","_useState6","status","setStatus","_useState7","_useState8","usage","setUsage","_useState9","_useState10","limit","setLimit","_useState11","_useState12","tier","setTier","_useState13","_useState14","subscriptionType","setSubscriptionType","_useState15","_useState16","formattedBillingCycleEnd","setFormattedBillingCycleEndDate","fetchAccountType","_ref2","_asyncToGenerator","response","fetch","data","json","fetchSubscriptionData","error","console","_x","apply","arguments","changeAccountType","_ref3","newAccountType","method","headers","body","JSON","stringify","updatedAccountType","_x2","_x3","fetchCredits","_ref4","_x4","_ref5","_data$subData","subData","billingCycleEnd","billingCycleEndDate","Date","_seconds","month","getMonth","toString","padStart","day","getDate","year","getFullYear","_x5","_x6","useEffect","fetchData","_ref6","navigation","useNavigation","email","setEmail","password","setPassword","isPasswordVisible","setIsPasswordVisible","setError","handleSignIn","auth","signInWithEmailAndPassword","user","emailVerified","signOut","_StyledComponent","className","component","View","_jsxs","colors","LinearGradient","source","require","Image","Text","placeholder","placeholderTextColor","onChangeText","text","secureTextEntry","TextInput","TouchableOpacity","style","position","right","top","transform","translateY","onPress","width","height","navigate","_NativeWindStyleSheet","create","styles","userType","setUserType","canSignIn","setCanSignIn","handleSignup","ok","sendEmailVerification","currentUser","navigateToSignIn","atRules","childClasses","emailSent","setEmailSent","handlePasswordReset","sendPasswordResetEmail","message","HostHomeProfileContext","useHostHomeProfileContext","HostHomeProfileProvider","profiles","setProfiles","selectedProfile","setSelectedProfile","note","setNote","dayProgram","setDayProgram","fetchProfiles","Error","createProfile","newProfileData","_objectSpread","log","concat","_toConsumableArray","updateProfile","updatedProfile","profileId","updatedProfileData","updatedProfiles","map","profile","deleteProfile","filter","length","profilesData","TherapistProfileContext","useTherapistProfileContext","TherapistProfileProvider","behavior","setBehavior","intervention","setIntervention","setResponse","plan","setPlan","profileName","setProfileName","profileGender","setProfileGender","profileGoals","setProfileGoals","morningMedication","setMorningMedication","afternoonMedication","setAfternoonMedication","nightMedication","setNightMedication","activity","setActivity","activities","setActivities","handleProfileCreation","trim","navigateToView","prevGender","prevActivities","FlatList","renderItem","item","index","ScrollView","_","i","handleDeleteActivity","keyExtractor","_useHostHomeProfileCo","_useServerContext","loading","setLoading","handleCopy","Clipboard","setStringAsync","Alert","alert","handleGenerate","generatedText","remainingCredits","newUsage","handleSave","formattedDate","currentDate","String","getCurrentDate","filename","blob","Blob","type","link","document","createElement","href","window","URL","createObjectURL","download","click","Picker","selectedValue","onValueChange","itemValue","find","Item","label","_Fragment","DeleteProfileModal","isVisible","onCancel","onDelete","Modal","transparent","newActivity","setNewActivity","isModalVisible","setModalVisible","handleUpdateProfile","handleDeleteProfile","handleConfirmDelete","prevProfile","updatedActivities","dispositions","selectedDisposition","toggleDisposition","searchTerm","setSearchTerm","filteredDispositions","disposition","toLowerCase","includes","flex","dispositionButton","selectedDispositionButton","backgroundColor","padding","margin","behaviorDispositions","interventionDispositions","_useTherapistProfileC","selectedBehaviorDispositions","setSelectedBehaviorDispositions","selectedInterventionDispositions","setSelectedInterventionDispositions","combinedText","DispositionContainer","handleSignOut","handleAccountTypeChange","quantity","setQuantity","price","setPrice","handlePurchase","productTitle","url","checkoutUrl","navigateToGenerate","goBack","calculatePrice","parsedQuantity","parseInt","keyboardType","test","toFixed","route","params","result","setResult","openBrowserAsync","WebBrowser","Stack","createNativeStackNavigator","Tab","createBottomTabNavigator","Navigator","initialRouteName","screenOptions","headerShown","tabBarStyle","borderColor","wp","maxWidth","alignSelf","tabBarIconStyle","alignItems","justifyContent","Screen","name","GenerateHostHomeNotesScreen","PurchaseScreen","StripeCheckoutScreen","options","tabBarIcon","color","size","tintColor","ViewHostHomeProfileScreen","CreateHostHomeProfileScreen","SettingsScreen","GenerateTherapistNotesScreen","setProfileOwner","unsubscribe","onAuthStateChanged","NavigationContainer","MainNavigator","SignInScreen","SignUpScreen","ForgotPasswordScreen","App","RootNavigator","NativeWindStyleSheet","setOutput","default","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","id","loaded","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","leafPrototypes","getProto","getPrototypeOf","obj","t","mode","this","then","ns","def","current","indexOf","getOwnPropertyNames","forEach","definition","o","defineProperty","enumerable","get","g","globalThis","Function","e","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","push","__webpack_exports__"],"sourceRoot":""}